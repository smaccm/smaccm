package XCASE_Model_Transformations
public
	
	with Base_Types;
	with XCASE_Properties;
	
	-- COMMUNICATIONS
	
	-- CASE message header
	data CASE_MsgHeader
	end CASE_MsgHeader;
	data implementation CASE_MsgHeader.Impl
		subcomponents
			src: data Base_Types::Integer;
			dst: data Base_Types::Integer;
			HMAC: data Base_Types::Boolean;
	end CASE_MsgHeader.Impl;

	-- RF Message structure
	data CASE_RF_Msg
	end CASE_RF_Msg;
	
	data implementation CASE_RF_Msg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
			message: data Base_Types::String;
	end CASE_RF_Msg.Impl;
	
	
	-- ATTESTATION MANAGER
		
	-- This is the structure of an Attestation Request message
	-- that the Attestation Manager sends to the comm driver
	data CASE_AttestationRequestMsg
	end CASE_AttestationRequestMsg;

	data implementation CASE_AttestationRequestMsg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
	end CASE_AttestationRequestMsg.Impl;

	-- This is the structure of an Attestation Response message
	-- that the comm driver returns to the Attestation Manager
	-- when it gets a response from the Ground Station
	data CASE_AttestationResponseMsg
	end CASE_AttestationResponseMsg;

	data implementation CASE_AttestationResponseMsg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
			status: data Base_Types::Boolean;
	end CASE_AttestationResponseMsg.Impl;
	
	-- This is the structure of a single entry in the attestation manager cache
	data CASE_AttestationCacheRecord
	end CASE_AttestationCacheRecord;
	
	data implementation CASE_AttestationCacheRecord.Impl
		subcomponents
			src: data Base_Types::Integer;
			trusted: data Base_Types::Integer;
			timeout: data Base_Types::Integer;
	end CASE_AttestationCacheRecord.Impl;
	
	
	-- This is the structure of the Attestation Cache
	-- It currently has a maximum size of 6, but we expect to 
	-- replace with a sizeable array in the future
	data CASE_AttestationCache
	end CASE_AttestationCache;
	
	data implementation CASE_AttestationCache.Impl
		subcomponents
			src1: data CASE_AttestationCacheRecord.Impl;
			src2: data CASE_AttestationCacheRecord.Impl;
			src3: data CASE_AttestationCacheRecord.Impl;
			src4: data CASE_AttestationCacheRecord.Impl;
			src5: data CASE_AttestationCacheRecord.Impl;
			src6: data CASE_AttestationCacheRecord.Impl;
	end CASE_AttestationCache.Impl;
		
	annex Agree {**	
		
		--------------------
		-- COMMUNICATIONS --
		--------------------
		-- Empty message header
		-- This indicates that the rest of the message can be ignored
		const NULL_ID : int = 0;
		const NULL_HEADER : CASE_MsgHeader.Impl = CASE_MsgHeader.Impl {src = NULL_ID; dst = NULL_ID; HMAC = false};
		fun NULL_MESSAGE(header : CASE_MsgHeader.Impl) : bool = (header = NULL_HEADER);
	
		---------------------------
		-- MODEL TRANSFORMATIONS --
		---------------------------
		
		-- Attestation Manager
		
		const NULL_AM_REQUEST_MESSAGE : CASE_AttestationRequestMsg.Impl = CASE_AttestationRequestMsg.Impl {header = NULL_HEADER};
		const NULL_CACHE : CASE_AttestationCache.Impl = CASE_AttestationCache.Impl {src1 = NULL_RECORD;
																					src2 = NULL_RECORD;
																					src3 = NULL_RECORD;
																					src4 = NULL_RECORD;
																					src5 = NULL_RECORD;
																					src6 = NULL_RECORD};
		
		const NULL_RECORD : CASE_AttestationCacheRecord.Impl = CASE_AttestationCacheRecord.Impl {src = 0; trusted = AM_FAIL; timeout = 0};
		
		-- This maintains the cache state
		node CACHE(new_cache : CASE_AttestationCache.Impl) returns (cache : CASE_AttestationCache.Impl);
		let
			cache = NULL_CACHE ->
				if new_cache = NULL_CACHE then
					pre(cache)
				else
					new_cache;
		tel;
		
		fun TRUSTED(src : Base_Types::Integer) : bool = 
			IN_CACHE(src) and PASS_ATTESTATION(src) and not IS_STALE(src);

		const AM_FAIL : int = 0;
		const AM_PASS : int = 1;
		const AM_REQUESTING : int = 2;
		
		-- Returns whether the specified node is in the cache
		node IN_CACHE(src : int) returns (result : bool);
		let
			result = not (GET_RECORD_BY_NAME(src) = NULL_RECORD);
		tel;
		
		-- Returns the attestation status of the specified node
		node GET_STATUS(src : int) returns (result : int);
		var record : CASE_AttestationCacheRecord.Impl;
		let
			record = GET_RECORD_BY_NAME(src);
			result = record.trusted;
		tel;

		-- Returns whether the specified node has passed attestation
		node PASS_ATTESTATION(src : int) returns (result : bool);
		var record : CASE_AttestationCacheRecord.Impl;
		let
			record = GET_RECORD_BY_NAME(src);
			result = (record.trusted = AM_PASS);
		tel;
		
		-- Returns whether the specified node data is old
		-- For now we are ignoring staleness
		node IS_STALE(src : int) returns (result : bool);
		var record : CASE_AttestationCacheRecord.Impl;
		let
			record = GET_RECORD_BY_NAME(src);
			-- for now we are ignoring staleness
			result = false;
		tel;
		
		-- Creates a new record with the specified values
		node CREATE_RECORD(new_src : int, new_trusted : int, new_timeout : int) returns (new_record : CASE_AttestationCacheRecord.Impl);
		let
			new_record = CASE_AttestationCacheRecord.Impl {src = new_src; trusted = new_trusted; timeout = new_timeout};
		tel;
		
		-- Adds a record to the cache with the specified value
		-- Record will only be added if there is free space up to an index specified by max_idx
		node ADD_RECORD(src : int, trusted : int, timeout : int, max_idx : int) returns (success : bool);
		var free_idx : int;
		let
			free_idx = GET_FREE_IDX(max_idx);
			success = if IN_CACHE(src) then
						not (WRITE_CACHE(GET_IDX_BY_NAME(src), CREATE_RECORD(src, trusted, timeout)) = NULL_CACHE)
					else if free_idx > 0 then
						not (WRITE_CACHE(free_idx, CREATE_RECORD(src, trusted, timeout)) = NULL_CACHE)
					else
						false;
		tel;
		
		-- Gets the index of an available record in the cache
		node GET_FREE_IDX(max : int) returns (idx : int);
		var c : CASE_AttestationCache.Impl;
		let
			c = CACHE(NULL_CACHE);
			idx = if c.src1 = NULL_RECORD and max >= 1 then 1
				else if c.src2 = NULL_RECORD and max >= 2 then 2
				else if c.src3 = NULL_RECORD and max >= 3 then 3
				else if c.src4 = NULL_RECORD and max >= 4 then 4
				else if c.src5 = NULL_RECORD and max >= 5 then 5
				else if c.src6 = NULL_RECORD and max >= 6 then 6
				else 0;
		tel;
		
		-- Returns a record in the cache at the specified index
		node GET_RECORD_BY_IDX(idx : int) returns (record : CASE_AttestationCacheRecord.Impl);
		var c : CASE_AttestationCache.Impl;
		let
			c = CACHE(NULL_CACHE);
			record = if idx = 1 then c.src1
					else if idx = 2 then c.src2
					else if idx = 3 then c.src3
					else if idx = 4 then c.src4
					else if idx = 5 then c.src5
					else if idx = 6 then c.src6
					else NULL_RECORD;
		tel;
		
		-- Returns a record in the cache with the specified ID
		node GET_RECORD_BY_NAME(src : int) returns (record : CASE_AttestationCacheRecord.Impl);
		var c : CASE_AttestationCache.Impl;
		let
			c = CACHE(NULL_CACHE);
			record = if c.src1.src = src then c.src1
					else if c.src2.src = src then c.src2
					else if c.src3.src = src then c.src3
					else if c.src4.src = src then c.src4
					else if c.src5.src = src then c.src5
					else if c.src6.src = src then c.src6
					else NULL_RECORD;
		tel;
		
		-- Returns the index of a record in the cache with the specified name
		node GET_IDX_BY_NAME(src : int) returns (idx : int);
		var c : CASE_AttestationCache.Impl;
		let
			c = CACHE(NULL_CACHE);
			idx = if c.src1.src = src then 1
					else if c.src2.src = src then 2
					else if c.src3.src = src then 3
					else if c.src4.src = src then 4
					else if c.src5.src = src then 5
					else if c.src6.src = src then 6
					else 0;
		tel;

		-- Writes a record to the cache
		node WRITE_CACHE(idx : int, record:CASE_AttestationCacheRecord.Impl) returns (new_cache : CASE_AttestationCache.Impl);
		let
			new_cache = if idx = 1 then
				CACHE(CASE_AttestationCache.Impl {src1 = record;
											src2 = GET_RECORD_BY_IDX(2);
											src3 = GET_RECORD_BY_IDX(3);
											src4 = GET_RECORD_BY_IDX(4);
											src5 = GET_RECORD_BY_IDX(5);
											src6 = GET_RECORD_BY_IDX(6)})
			else if idx = 2 then
				CACHE(CASE_AttestationCache.Impl {src1 = GET_RECORD_BY_IDX(1);
											src2 = record;
											src3 = GET_RECORD_BY_IDX(3);
											src4 = GET_RECORD_BY_IDX(4);
											src5 = GET_RECORD_BY_IDX(5);
											src6 = GET_RECORD_BY_IDX(6)})
			else if idx = 3 then
				CACHE(CASE_AttestationCache.Impl {src1 = GET_RECORD_BY_IDX(1);
											src2 = GET_RECORD_BY_IDX(2);
											src3 = record;
											src4 = GET_RECORD_BY_IDX(4);
											src5 = GET_RECORD_BY_IDX(5);
											src6 = GET_RECORD_BY_IDX(6)})
			else if idx = 4 then
				CACHE(CASE_AttestationCache.Impl {src1 = GET_RECORD_BY_IDX(1);
											src2 = GET_RECORD_BY_IDX(2);
											src3 = GET_RECORD_BY_IDX(3);
											src4 = record;
											src5 = GET_RECORD_BY_IDX(5);
											src6 = GET_RECORD_BY_IDX(6)})
			else if idx = 5 then
				CACHE(CASE_AttestationCache.Impl {src1 = GET_RECORD_BY_IDX(1);
											src2 = GET_RECORD_BY_IDX(2);
											src3 = GET_RECORD_BY_IDX(3);
											src4 = GET_RECORD_BY_IDX(4);
											src5 = record;
											src6 = GET_RECORD_BY_IDX(6)})
			else if idx = 6 then
				CACHE(CASE_AttestationCache.Impl {src1 = GET_RECORD_BY_IDX(1);
											src2 = GET_RECORD_BY_IDX(2);
											src3 = GET_RECORD_BY_IDX(3);
											src4 = GET_RECORD_BY_IDX(4);
											src5 = GET_RECORD_BY_IDX(5);
											src6 = record})
			else
				NULL_CACHE;
		tel;
	
	**};
	
	annex Resolute {**
		
		---------------------------
		-- MODEL TRANSFORMATIONS --
		---------------------------
		
		-- Top-level claim for proper insertion of a filter
		add_filter(c : component, message_type : data) <=
			** "Filter inserted before " c **
			filter_exists(c) and filter_not_bypassed(c, message_type) and filter_prop_checked()
			
		-- Top-level claim for proper insertion of attestation manager
		add_attestation_manager(comm_driver : component, attestation_manager : component) <=
			** "Attestation Manager added for communications driver " comm_driver **
			attestation_manager_exists(comm_driver, attestation_manager) and attestation_manager_not_bypassed(comm_driver, attestation_manager) and attestation_manager_prop_checked()			
		
		-- Top-level claim for proper insertion of a router
		add_router(c : component) <=
			** "Router inserted after " c **
			true
	
		-- Top-level claim for proper insertion of a monitor
		add_monitor(c : component) <=
			** "Monitor inserted on " c **
			true
		
		-- Top-level claim for proper insertion of an isolator
		add_isolator(c : component) <=
			** "Isolator added to " c **
			true	
		
		----------------
		-- SUB CLAIMS --
		----------------
	
		-- This connects to evidence that AGREE was previously run on the current version of the design.
		agree_prop_checked(c : component, property_id : string) <=
			** "AGREE properties passed" **
			AgreeLib.hasAgreeProperty(c, property_id) and analysis("AgreeCheck")	
		
		-- Ideally, we want to check that there's a filter anywhere between
		-- pairs of components (such as the ground station and flight planner).
		-- However, there's a bug in Resolute that prevents us from doing that.
		-- So for now, we just check to see if there is a filter immediately before 
		-- the component on the communication pathway.
		filter_exists(c : component) <=
			** "A filter exists on the communication pathway immediately before " c **
			-- get incoming connections
			let in_conns : {connection} = {conn for (conn : connections(c)) | destination_component(conn) = c};
			exists(conn : in_conns). is_filter(source_component(conn))
	
		-- Make sure there is no communication pathway that avoids the filter
	    filter_not_bypassed(c : component, message_type : data) <=
		    ** "Filter cannot be bypassed" **
			-- get incoming connections of type Command
			let cmd_conns : {connection} = {conn for (conn : connections(c)) | 
											destination_component(conn) = c and has_type(conn) and type(conn) = message_type};
			-- show that all of these connections come from a filter
			forall(conn : cmd_conns). is_filter(source_component(conn))
	
	    -- This should connect to some evidence that the filter was correctly generated
	    -- and that the proof was emitted and checked.
	    -- However, this funcionality has not yet been implemented
	    filter_prop_checked() <=
		    ** "Filter property implemented by CakeML" **
		    forall (c : component). is_filter(c)
		       => has_property(c, XCASE_Properties::COMP_IMPL) and property(c, XCASE_Properties::COMP_IMPL) = "CAKEML"
		       and filter_proof_checked()
		       
		-- Checks if the specified component is a filter
		is_filter(c : component) : bool =
			has_property(c, XCASE_Properties::COMP_TYPE) and property(c, XCASE_Properties::COMP_TYPE) = "FILTER"
			
		-- Checks that a proof has been generated showing the filter regular expression
		-- matches the AGREE contract
--		filter_proof_checked() <=
--			** "Filter proof checked" **
--			analysis("ToolCheck", "SPLAT")
			
		-- Evidence that an attestation manager component exists for a given communication driver
		attestation_manager_exists(comm_driver : component, attestation_manager : component) <=
			** "An attestation manager on " comm_driver " exists" **
			-- check that the attestation manager only has attestation request/response connections to the comm driver
			let am : component = instance(attestation_manager);
			let cd : component = instance(comm_driver);
			let attestation_conns : {connection} = {conn for (conn : connections(am))};
			is_comm_driver(cd) and is_attestation_manager(am) and
			forall (conn : attestation_conns). 
					(has_type(conn) and name(type(conn)) = "CASE_AttestationRequestMsg.Impl") => destination_component(conn) = cd and
					(has_type(conn) and name(type(conn)) = "CASE_AttestationResponseMsg.Impl") => source_component(conn) = cd
			
		-- Evidence that communication from the comm driver cannot bypass attestation manager
		attestation_manager_not_bypassed(comm_driver : component, attestation_manager : component) <=
			** "Attestation Manager cannot be bypassed" **
			-- all outgoing connections from the comm driver to components inside the 
			-- parent of the comm driver all lead to the attestation manager
			let am : component = instance(attestation_manager);
			let cd : component = instance(comm_driver);
			let out_conns : {connection} = {conn for (conn : connections(cd)) | source_component(conn) = cd and not (destination_component(conn) = parent(cd))};
			forall(conn : out_conns). destination_component(conn) = am 
			
		-- This should connect to some evidence that the attestation manager was correctly generated
	    -- and that the proof was emitted and checked.
	    -- However, this funcionality has not yet been implemented
	    attestation_manager_prop_checked() <=
		    ** "Attestation Manager property implemented by CakeML" **
		    forall (c : component). is_attestation_manager(c)
		       => has_property(c, XCASE_Properties::COMP_IMPL) and property(c, XCASE_Properties::COMP_IMPL) = "CAKEML"
		       and attestation_manager_proof_checked()
		       
		-- Checks that a proof has been generated showing the attestation manager has been implemented correctly
		attestation_manager_proof_checked() : bool =
		true
--			analysis("ToolCheck", "SPLAT")
			
		-- Checks if the specified component is an attestation manager
		is_attestation_manager(c : component) : bool =
			has_property(c, XCASE_Properties::COMP_TYPE) and property(c, XCASE_Properties::COMP_TYPE) = "ATTESTATION"
	
		-- Checks if the specified component is a communications driver
		is_comm_driver(c : component) : bool =
			has_property(c, XCASE_Properties::COMP_TYPE) and property(c, XCASE_Properties::COMP_TYPE) = "COMM_DRIVER"
	
	**};
	
end XCASE_Model_Transformations;