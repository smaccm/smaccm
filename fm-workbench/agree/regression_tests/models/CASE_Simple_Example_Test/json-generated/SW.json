[
  {
    "name": "SW",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "UAV",
        "Data_Model",
        "Base_Types",
        "CASE_Properties",
        "CASE_Model_Transformations"
      ],
      "renames": [
        {
          "package": "CASE_Model_Transformations",
          "rename": "all"
        }
      ],
      "components": [
        {
          "name": "Coordinate",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Coordinate.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "latitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "longitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "altitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            }
          ]
        },
        {
          "name": "Map",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Map.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "MapArray",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "MapArray.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "map1",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map2",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map3",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map4",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map5",
              "category": "data",
              "classifier": "SW::Map.Impl"
            }
          ]
        },
        {
          "name": "FlightPattern",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Enum"
            },
            {
              "name": "Data_Model::Enumerators",
              "value": [
                "ZigZag",
                "StraightLine",
                "Perimeter"
              ]
            }
          ]
        },
        {
          "name": "FlightPattern.Impl",
          "kind": "ComponentImplementation",
          "category": "data"
        },
        {
          "name": "Command",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Command.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "map",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "pattern",
              "category": "data",
              "classifier": "SW::FlightPattern"
            }
          ]
        },
        {
          "name": "Mission",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Mission.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp5",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp6",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp7",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp8",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp9",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp10",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "MissionWindow",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "MissionWindow.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "WifiDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ]
        },
        {
          "name": "WifiDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "RadioDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "mission_command",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "status",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_metadata",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_request",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_response",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "value": "COMM_DRIVER"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_RadioDriver",
                    "label": "The message is intended for this UAV",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "recv_data.header.dst",
                      "op": "=",
                      "right": "CASE_UAV_ID"
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_RadioDriver",
                    "label": "Only valid messages from the ground station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "mission_command"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "RadioDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread",
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "mission_command_event",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "EventExpr",
                              "id": "recv_data"
                            },
                            "op": "and",
                            "right": {
                              "kind": "BinaryExpr",
                              "left": "recv_data.header.src",
                              "op": ">",
                              "right": "0"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": "recv_data.header.dst",
                            "op": "=",
                            "right": "CASE_UAV_ID"
                          }
                        },
                        "op": "and",
                        "right": "recv_data.header.HMAC"
                      },
                      "then": "true",
                      "else": "false"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "mission_command_metadata",
                        "type": "CASE_MsgHeader.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "mission_command_event",
                      "then": "recv_data.header",
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_event",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "EventExpr",
                      "id": "am_request"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_header",
                        "type": "CASE_MsgHeader.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_event",
                      "then": {
                        "kind": "RecordExpr",
                        "recordType": "CASE_MsgHeader.null",
                        "value": {
                          "null": "true"
                        }
                      },
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_response.header",
                      "op": "=",
                      "right": "am_response_header"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_metadata",
                      "op": "=",
                      "right": "mission_command_metadata"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "EventExpr",
                        "id": "am_response"
                      },
                      "op": "=",
                      "right": "am_response_event"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "EventExpr",
                        "id": "mission_command"
                      },
                      "op": "=",
                      "right": "mission_command_event"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "CASE_AttestationManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "am_mission_command_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_mission_command_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_metadata",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_request",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_response",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "value": "ATTESTATION"
            },
            {
              "name": "CASE_Properties::COMP_IMPL",
              "value": "CakeML"
            },
            {
              "name": "CASE_Properties::COMP_SPEC",
              "value": "Req001_AttestationManager"
            },
            {
              "name": "CASE_Properties::CACHE_TIMEOUT",
              "value": "30"
            },
            {
              "name": "CASE_Properties::CACHE_SIZE",
              "value": "4"
            },
            {
              "name": "CASE_Properties::LOG_SIZE",
              "value": "100"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_RadioDriver_AttestationManager",
                    "label": "Only valid messages from the ground station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "am_mission_command_out"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_AttestationManager",
                    "label": "The Attestation Manager shall only forward trusted messages",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "TRUSTED_MESSAGE",
                        "args": [
                          "am_mission_command_out"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.TRUSTED",
                          "args": [
                            "am_mission_command_out.null.null"
                          ]
                        },
                        "op": "=>",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": "am_mission_command_out",
                          "op": "=",
                          "right": "am_mission_command_in"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "CASE_AttestationManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread",
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_msg",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "UnaryExpr",
                      "operand": {
                        "kind": "FnCallExpr",
                        "function": "CASE_Model_Transformations.NULL_MESSAGE",
                        "args": [
                          "am_response.header"
                        ]
                      },
                      "op": "not"
                    }
                  },
                  {
                    "kind": "FnDefExpr",
                    "name": "MSG_CTR",
                    "args": [
                      {
                        "name": "null_msg",
                        "type": "bool"
                      }
                    ],
                    "type": "int",
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "null_msg",
                      "then": "0",
                      "else": "1"
                    }
                  },
                  {
                    "kind": "PropertyStatement",
                    "name": "one_incoming_message",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "MSG_CTR",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.NULL_MESSAGE",
                              "args": [
                                "am_mission_command_in.null"
                              ]
                            }
                          ]
                        },
                        "op": "+",
                        "right": {
                          "kind": "FnCallExpr",
                          "function": "MSG_CTR",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.NULL_MESSAGE",
                              "args": [
                                "am_response.header"
                              ]
                            }
                          ]
                        }
                      },
                      "op": "<=",
                      "right": "1"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": "one_incoming_message"
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "msg_src",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "UnaryExpr",
                        "operand": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            "am_mission_command_in.null"
                          ]
                        },
                        "op": "not"
                      },
                      "then": "am_mission_command_in.null.null",
                      "else": "CASE_Model_Transformations.NULL_ID"
                    }
                  },
                  {
                    "kind": "FnDefExpr",
                    "name": "GET_HEADER",
                    "args": [
                      {
                        "name": "src",
                        "type": "int"
                      }
                    ],
                    "type": "CASE_MsgHeader.Impl",
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "am_mission_command_in.null.src",
                        "op": "=",
                        "right": "src"
                      },
                      "then": "am_mission_command_in.null",
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_request_msg",
                        "type": "CASE_AttestationRequestMsg.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_msg",
                      "then": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "GET_HEADER",
                              "args": [
                                "msg_src"
                              ]
                            }
                          ]
                        },
                        "then": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "UnaryExpr",
                              "operand": {
                                "kind": "FnCallExpr",
                                "function": "CASE_Model_Transformations.IN_CACHE",
                                "args": [
                                  "msg_src"
                                ]
                              },
                              "op": "not"
                            },
                            "op": "or",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.IS_STALE",
                              "args": [
                                "msg_src"
                              ]
                            }
                          },
                          "then": {
                            "kind": "RecordExpr",
                            "recordType": "CASE_AttestationRequestMsg.null",
                            "value": {
                              "null": {
                                "kind": "RecordExpr",
                                "recordType": "CASE_MsgHeader.null",
                                "value": {
                                  "null": "true"
                                }
                              }
                            }
                          },
                          "else": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE"
                        }
                      }
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_mission_command_out_msg",
                        "type": "Command.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_msg",
                      "then": {
                        "kind": "RecordExpr",
                        "recordType": "Command.null",
                        "value": {
                          "null": "am_mission_command_out.pattern",
                          "Map": "am_mission_command_out.map"
                        }
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            "am_mission_command_in.null"
                          ]
                        },
                        "then": "am_mission_command_in",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "UnaryExpr",
                              "operand": {
                                "kind": "FnCallExpr",
                                "function": "CASE_Model_Transformations.IN_CACHE",
                                "args": [
                                  "msg_src"
                                ]
                              },
                              "op": "not"
                            },
                            "op": "or",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.IS_STALE",
                              "args": [
                                "msg_src"
                              ]
                            }
                          },
                          "then": {
                            "kind": "RecordExpr",
                            "recordType": "Command.null",
                            "value": {
                              "null": "am_mission_command_out.pattern",
                              "Map": "am_mission_command_out.map"
                            }
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.PASS_ATTESTATION",
                              "args": [
                                "msg_src"
                              ]
                            },
                            "then": "am_mission_command_in",
                            "else": {
                              "kind": "RecordExpr",
                              "recordType": "Command.null",
                              "value": {
                                "null": "am_mission_command_out.pattern",
                                "Map": "am_mission_command_out.map"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "kind": "ConstStatement",
                    "name": "AM_CACHE_SIZE",
                    "type": "int",
                    "expr": "4"
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "was_response_requested",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_response_msg",
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.GET_STATUS",
                          "args": [
                            "am_response.header.src"
                          ]
                        },
                        "op": "=",
                        "right": "CASE_Model_Transformations.AM_REQUESTING"
                      }
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_status",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "am_response_msg",
                        "op": "and",
                        "right": "am_response.status"
                      },
                      "then": "CASE_Model_Transformations.AM_PASS",
                      "else": "CASE_Model_Transformations.AM_FAIL"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "src_added",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "was_response_requested",
                      "then": {
                        "kind": "FnCallExpr",
                        "function": "CASE_Model_Transformations.ADD_RECORD",
                        "args": [
                          "am_response.header.src",
                          "am_status",
                          "0",
                          "AM_CACHE_SIZE"
                        ]
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "UnaryExpr",
                          "operand": {
                            "kind": "BinaryExpr",
                            "left": "am_request_msg",
                            "op": "=",
                            "right": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE"
                          },
                          "op": "not"
                        },
                        "then": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.ADD_RECORD",
                          "args": [
                            "msg_src",
                            "CASE_Model_Transformations.AM_REQUESTING",
                            "0",
                            "AM_CACHE_SIZE"
                          ]
                        },
                        "else": "false"
                      }
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_request",
                      "op": "=",
                      "right": "am_request_msg"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "was_response_requested",
                      "op": "=>",
                      "right": "src_added"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_mission_command_out",
                      "op": "=",
                      "right": "am_mission_command_out_msg"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "FlightPlanner",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "out"
            },
            {
              "name": "recv_map",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "request_nofly_zones",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "nofly_zones",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req004_FP",
                    "label": "The FlightPlanner shall receive a well-formed command from the GroundStation",
                    "expr": "false"
                  },
                  {
                    "kind": "AssumeStatement",
                    "name": "Req003_FlightPlanner",
                    "label": "The FlightPlanner shall only accept messages from a trusted GroundStation",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "TRUSTED_MESSAGE",
                      "args": [
                        "recv_map"
                      ]
                    }
                  },
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_FlightPlanner",
                    "label": "The Flight Planner shall receive a valid message from the Ground Station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "recv_map"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_FlightPlanner",
                    "label": "The Flight Planner shall generate a valid mission",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission",
                      "args": [
                        "flight_plan"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "FlightPlanner.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "NoFlyZoneDatabase",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "map",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "zones",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "NoFlyZoneDatabase.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "WaypointManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "in"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_WaypointManager",
                    "label": "The Waypoint Manager shall receive a well-formed mission",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission",
                      "args": [
                        "flight_plan"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_WaypointManager",
                    "label": "The Waypoint Manager shall output a well-formed mission window",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission_window",
                      "args": [
                        "mission_window"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "WaypointManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "CameraManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "CameraManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "UARTDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "status",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_UARTDriver",
                    "label": "Well-formed mission window",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission_window",
                      "args": [
                        "mission_window"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_UARTDriver",
                    "label": "A CRC shall be appended to the message to determine message correctness",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "send_data.crc",
                      "op": "=",
                      "right": "true"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "UARTDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW",
          "kind": "ComponentType",
          "category": "process",
          "features": [
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "uart_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "uart_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "wifi_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "wifi_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_SW",
                    "label": "The Mission Computer shall only accept commands intended for this UAV",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "radio_recv.header.dst",
                      "op": "=",
                      "right": "CASE_UAV_ID"
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_SW",
                    "label": "The Mission Computer shall output a valid mission window to the Flight Controller",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "uart_send.crc",
                      "op": "=",
                      "right": "true"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW.Impl1",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "AM",
              "category": "thread",
              "classifier": "SW::CASE_AttestationManager.Impl"
            },
            {
              "name": "FPLN",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "AM.am_mission_command_in",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "AM.am_mission_command_out",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c19",
              "kind": "port",
              "source": "AM.am_request",
              "destination": "RADIO.am_request",
              "bidirectional": "false"
            },
            {
              "name": "c20",
              "kind": "port",
              "source": "RADIO.am_response",
              "destination": "AM.am_response",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        },
        {
          "name": "SW.Impl",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "FPLN",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        }
      ],
      "annexes": [
        {
          "name": "agree",
          "parsedAnnexLibrary": {
            "statements": [
              {
                "kind": "ConstStatement",
                "name": "CASE_UAV_ID",
                "type": "int",
                "expr": "42"
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_ID",
                "type": "int",
                "expr": "0"
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_HEADER",
                "type": "CASE_MsgHeader.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_MsgHeader.null",
                  "value": {
                    "null": "false"
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "NULL_MESSAGE",
                "args": [
                  {
                    "name": "header",
                    "type": "CASE_MsgHeader.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": "header",
                  "op": "=",
                  "right": "NULL_HEADER"
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "VALID_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": "msg.null.null",
                        "op": ">",
                        "right": "0"
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": "msg.null.null",
                        "op": "=",
                        "right": "CASE_UAV_ID"
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "msg.null.null",
                      "op": "=",
                      "right": "true"
                    }
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "TRUSTED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.TRUSTED",
                    "args": [
                      "msg.null.null"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "WELL_FORMED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_command",
                    "args": [
                      "msg"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_coordinate",
                "args": [
                  {
                    "name": "coord",
                    "type": "Coordinate.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": "coord.latitude",
                            "op": ">=",
                            "right": {
                              "kind": "UnaryExpr",
                              "operand": "90",
                              "op": "-"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": "coord.latitude",
                            "op": "<=",
                            "right": "90"
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": "coord.longitude",
                          "op": ">=",
                          "right": {
                            "kind": "UnaryExpr",
                            "operand": "180",
                            "op": "-"
                          }
                        }
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": "coord.longitude",
                        "op": "<=",
                        "right": "180"
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "coord.altitude",
                      "op": ">=",
                      "right": "0"
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": "coord.altitude",
                    "op": "<=",
                    "right": "15000"
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_map",
                "args": [
                  {
                    "name": "map",
                    "type": "Map.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "map.wp1"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "map.wp2"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "map.wp3"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "map.wp4"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_pattern",
                "args": [
                  {
                    "name": "pattern",
                    "type": "FlightPattern.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": "pattern",
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": "FlightPattern",
                        "value": "ZigZag"
                      }
                    },
                    "op": "or",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "pattern",
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": "FlightPattern",
                        "value": "StraightLine"
                      }
                    }
                  },
                  "op": "or",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": "pattern",
                    "op": "=",
                    "right": {
                      "kind": "AadlEnumerator",
                      "type": "FlightPattern",
                      "value": "Perimeter"
                    }
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_command",
                "args": [
                  {
                    "name": "cmd",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "good_map",
                    "args": [
                      "cmd.map"
                    ]
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_pattern",
                    "args": [
                      "cmd.pattern"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_mission",
                "args": [
                  {
                    "name": "mission",
                    "type": "Mission.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "FnCallExpr",
                                    "function": "good_coordinate",
                                    "args": [
                                      "mission.wp1"
                                    ]
                                  },
                                  "op": "and",
                                  "right": {
                                    "kind": "FnCallExpr",
                                    "function": "good_coordinate",
                                    "args": [
                                      "mission.wp2"
                                    ]
                                  }
                                },
                                "op": "and",
                                "right": {
                                  "kind": "FnCallExpr",
                                  "function": "good_coordinate",
                                  "args": [
                                    "mission.wp3"
                                  ]
                                }
                              },
                              "op": "and",
                              "right": {
                                "kind": "FnCallExpr",
                                "function": "good_coordinate",
                                "args": [
                                  "mission.wp4"
                                ]
                              }
                            },
                            "op": "and",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "good_coordinate",
                              "args": [
                                "mission.wp5"
                              ]
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "FnCallExpr",
                            "function": "good_coordinate",
                            "args": [
                              "mission.wp6"
                            ]
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "FnCallExpr",
                          "function": "good_coordinate",
                          "args": [
                            "mission.wp7"
                          ]
                        }
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "mission.wp8"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "mission.wp9"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "mission.wp10"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_mission_window",
                "args": [
                  {
                    "name": "win",
                    "type": "MissionWindow.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "win.wp1"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "win.wp2"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "win.wp3"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "win.wp4"
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "UAV",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "MC",
        "FC",
        "UAS",
        "Base_Types",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "UART_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "UART_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "crc",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            },
            {
              "name": "message",
              "category": "data",
              "classifier": "Base_Types::String"
            }
          ]
        },
        {
          "name": "WIFI_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "WIFI_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "crc",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            },
            {
              "name": "message",
              "category": "data",
              "classifier": "Base_Types::String"
            }
          ]
        },
        {
          "name": "Serial",
          "kind": "ComponentType",
          "category": "bus",
          "properties": [
            {
              "name": "CASE_Properties::COMM_MODALITY",
              "value": "SERIAL"
            }
          ]
        },
        {
          "name": "Serial.Impl",
          "kind": "ComponentImplementation",
          "category": "bus"
        },
        {
          "name": "Wifi",
          "kind": "ComponentType",
          "category": "bus",
          "properties": [
            {
              "name": "CASE_Properties::COMM_MODALITY",
              "value": "WIFI"
            }
          ]
        },
        {
          "name": "Wifi.Impl",
          "kind": "ComponentImplementation",
          "category": "bus"
        },
        {
          "name": "Camera",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "wifi_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "wifi_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "WIFIA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Wifi.Impl"
            }
          ]
        },
        {
          "name": "Camera.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "UAV",
          "kind": "ComponentType",
          "category": "system",
          "features": [
            {
              "name": "RFA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAS::RF.Impl"
            },
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::BOUNDARY",
              "value": [
                "PHYSICAL"
              ]
            }
          ]
        },
        {
          "name": "UAV.Impl",
          "kind": "ComponentImplementation",
          "category": "system",
          "subcomponents": [
            {
              "name": "SBUS",
              "category": "bus",
              "classifier": "UAV::Serial.Impl"
            },
            {
              "name": "WBUS",
              "category": "bus",
              "classifier": "UAV::Wifi.Impl"
            },
            {
              "name": "CAM",
              "category": "device",
              "classifier": "UAV::Camera.Impl"
            },
            {
              "name": "MCMP",
              "category": "system",
              "classifier": "MC::MissionComputer.Impl"
            },
            {
              "name": "FCTL",
              "category": "system",
              "classifier": "FC::FlightController.Impl"
            }
          ],
          "connections": [
            {
              "name": "bac1",
              "kind": "busAccess",
              "source": "SBUS",
              "destination": "MCMP.UARTA",
              "bidirectional": "true"
            },
            {
              "name": "bac2",
              "kind": "busAccess",
              "source": "SBUS",
              "destination": "FCTL.UARTA",
              "bidirectional": "true"
            },
            {
              "name": "bac3",
              "kind": "busAccess",
              "source": "RFA",
              "destination": "MCMP.RFA",
              "bidirectional": "false"
            },
            {
              "name": "bac4",
              "kind": "busAccess",
              "source": "WBUS",
              "destination": "MCMP.WIFIA",
              "bidirectional": "true"
            },
            {
              "name": "bac5",
              "kind": "busAccess",
              "source": "WBUS",
              "destination": "CAM.WIFIA",
              "bidirectional": "true"
            },
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "MCMP.radio_recv",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "MCMP.radio_send",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "MCMP.uart_send",
              "destination": "FCTL.uart_recv",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "FCTL.uart_send",
              "destination": "MCMP.uart_recv",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "MCMP.wifi_send",
              "destination": "CAM.wifi_recv",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "CAM.wifi_send",
              "destination": "MCMP.wifi_recv",
              "bidirectional": "false"
            }
          ],
          "properties": [
            {
              "name": "Deployment_Properties::Actual_Connection_Binding",
              "value": [
                "SBUS"
              ],
              "appliesTo": [
                "c3",
                "c4"
              ]
            },
            {
              "name": "Deployment_Properties::Actual_Connection_Binding",
              "value": [
                "WBUS"
              ],
              "appliesTo": [
                "c5",
                "c6"
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "name": "MC",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "SW",
        "UAV",
        "UAS",
        "CASE_Model_Transformations"
      ],
      "components": [
        {
          "name": "Radio",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "recv_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "send_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "MCA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "MC::MC_Bus.Impl"
            },
            {
              "name": "RFA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAS::RF.Impl"
            }
          ]
        },
        {
          "name": "Radio.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "UART",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "recv_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "send_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "MCA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "MC::MC_Bus.Impl"
            },
            {
              "name": "UARTA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Serial.Impl"
            }
          ]
        },
        {
          "name": "UART.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "Wifi",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "recv_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "send_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "MCA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "MC::MC_Bus.Impl"
            },
            {
              "name": "WIFIA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Wifi.Impl"
            }
          ]
        },
        {
          "name": "Wifi.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "MC_Proc",
          "kind": "ComponentType",
          "category": "processor",
          "features": [
            {
              "name": "MCA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "MC::MC_Bus.Impl"
            }
          ]
        },
        {
          "name": "MC_Proc.Impl",
          "kind": "ComponentImplementation",
          "category": "processor"
        },
        {
          "name": "MC_Mem",
          "kind": "ComponentType",
          "category": "memory",
          "features": [
            {
              "name": "MCA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "MC::MC_Bus.Impl"
            }
          ]
        },
        {
          "name": "MC_Mem.Impl",
          "kind": "ComponentImplementation",
          "category": "memory"
        },
        {
          "name": "MC_Bus",
          "kind": "ComponentType",
          "category": "bus"
        },
        {
          "name": "MC_Bus.Impl",
          "kind": "ComponentImplementation",
          "category": "bus"
        },
        {
          "name": "MissionComputer",
          "kind": "ComponentType",
          "category": "system",
          "features": [
            {
              "name": "UARTA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Serial.Impl"
            },
            {
              "name": "RFA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAS::RF.Impl"
            },
            {
              "name": "WIFIA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Wifi.Impl"
            },
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "uart_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "uart_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "wifi_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "wifi_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "MissionComputer.Impl",
          "kind": "ComponentImplementation",
          "category": "system",
          "subcomponents": [
            {
              "name": "BUS_HW",
              "category": "bus",
              "classifier": "MC::MC_Bus.Impl"
            },
            {
              "name": "RADIO_HW",
              "category": "device",
              "classifier": "MC::Radio.Impl"
            },
            {
              "name": "UART_HW",
              "category": "device",
              "classifier": "MC::UART.Impl"
            },
            {
              "name": "WIFI_HW",
              "category": "device",
              "classifier": "MC::Wifi.Impl"
            },
            {
              "name": "MEM_HW",
              "category": "memory",
              "classifier": "MC::MC_Mem.Impl"
            },
            {
              "name": "PROC_SW",
              "category": "process",
              "classifier": "SW::SW.Impl"
            },
            {
              "name": "PROC_HW",
              "category": "processor",
              "classifier": "MC::MC_Proc.Impl"
            }
          ],
          "connections": [
            {
              "name": "bac1",
              "kind": "busAccess",
              "source": "RADIO_HW.MCA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac2",
              "kind": "busAccess",
              "source": "UART_HW.MCA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac3",
              "kind": "busAccess",
              "source": "PROC_HW.MCA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac4",
              "kind": "busAccess",
              "source": "MEM_HW.MCA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac5",
              "kind": "busAccess",
              "source": "WIFI_HW.MCA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac6",
              "kind": "busAccess",
              "source": "RADIO_HW.RFA",
              "destination": "RFA",
              "bidirectional": "true"
            },
            {
              "name": "bac7",
              "kind": "busAccess",
              "source": "UART_HW.UARTA",
              "destination": "UARTA",
              "bidirectional": "true"
            },
            {
              "name": "bac8",
              "kind": "busAccess",
              "source": "WIFI_HW.WIFIA",
              "destination": "WIFIA",
              "bidirectional": "true"
            },
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO_HW.recv_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO_HW.recv_data_out",
              "destination": "PROC_SW.radio_recv",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "PROC_SW.radio_send",
              "destination": "RADIO_HW.send_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "RADIO_HW.send_data_out",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART_HW.recv_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "UART_HW.recv_data_out",
              "destination": "PROC_SW.uart_recv",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "PROC_SW.uart_send",
              "destination": "UART_HW.send_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "UART_HW.send_data_out",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI_HW.recv_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "WIFI_HW.recv_data_out",
              "destination": "PROC_SW.wifi_recv",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "PROC_SW.wifi_send",
              "destination": "WIFI_HW.send_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "WIFI_HW.send_data_out",
              "destination": "wifi_send",
              "bidirectional": "false"
            }
          ],
          "properties": [
            {
              "name": "Deployment_Properties::Actual_Processor_Binding",
              "value": [
                "PROC_HW"
              ],
              "appliesTo": [
                "PROC_SW"
              ]
            },
            {
              "name": "Deployment_Properties::Actual_Memory_Binding",
              "value": [
                "MEM_HW"
              ],
              "appliesTo": [
                "PROC_SW"
              ]
            },
            {
              "name": "Deployment_Properties::Actual_Connection_Binding",
              "value": [
                "BUS_HW"
              ],
              "appliesTo": [
                "c2",
                "c3",
                "c6",
                "c7",
                "c10",
                "c11"
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "name": "SW",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "UAV",
        "Data_Model",
        "Base_Types",
        "CASE_Properties",
        "CASE_Model_Transformations"
      ],
      "renames": [
        {
          "package": "CASE_Model_Transformations",
          "rename": "all"
        }
      ],
      "components": [
        {
          "name": "Coordinate",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Coordinate.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "latitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "longitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "altitude",
              "category": "data",
              "classifier": "Base_Types::Integer"
            }
          ]
        },
        {
          "name": "Map",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Map.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "MapArray",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "MapArray.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "map1",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map2",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map3",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map4",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "map5",
              "category": "data",
              "classifier": "SW::Map.Impl"
            }
          ]
        },
        {
          "name": "FlightPattern",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Enum"
            },
            {
              "name": "Data_Model::Enumerators",
              "value": [
                "ZigZag",
                "StraightLine",
                "Perimeter"
              ]
            }
          ]
        },
        {
          "name": "FlightPattern.Impl",
          "kind": "ComponentImplementation",
          "category": "data"
        },
        {
          "name": "Command",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Command.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "map",
              "category": "data",
              "classifier": "SW::Map.Impl"
            },
            {
              "name": "pattern",
              "category": "data",
              "classifier": "SW::FlightPattern"
            }
          ]
        },
        {
          "name": "Mission",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "Mission.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp5",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp6",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp7",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp8",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp9",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp10",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "MissionWindow",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "MissionWindow.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "wp1",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp2",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp3",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            },
            {
              "name": "wp4",
              "category": "data",
              "classifier": "SW::Coordinate.Impl"
            }
          ]
        },
        {
          "name": "WifiDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ]
        },
        {
          "name": "WifiDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "RadioDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "mission_command",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "status",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_metadata",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_request",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_response",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "value": "COMM_DRIVER"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_RadioDriver",
                    "label": "The message is intended for this UAV",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "recv_data.header.dst",
                      "op": "=",
                      "right": "CASE_UAV_ID"
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_RadioDriver",
                    "label": "Only valid messages from the ground station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "mission_command"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "RadioDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread",
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "mission_command_event",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "EventExpr",
                              "id": "recv_data"
                            },
                            "op": "and",
                            "right": {
                              "kind": "BinaryExpr",
                              "left": "recv_data.header.src",
                              "op": ">",
                              "right": "0"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": "recv_data.header.dst",
                            "op": "=",
                            "right": "CASE_UAV_ID"
                          }
                        },
                        "op": "and",
                        "right": "recv_data.header.HMAC"
                      },
                      "then": "true",
                      "else": "false"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "mission_command_metadata",
                        "type": "CASE_MsgHeader.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "mission_command_event",
                      "then": "recv_data.header",
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_event",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "EventExpr",
                      "id": "am_request"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_header",
                        "type": "CASE_MsgHeader.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_event",
                      "then": {
                        "kind": "RecordExpr",
                        "recordType": "CASE_MsgHeader.null",
                        "value": {
                          "null": "true"
                        }
                      },
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_response.header",
                      "op": "=",
                      "right": "am_response_header"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_metadata",
                      "op": "=",
                      "right": "mission_command_metadata"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "EventExpr",
                        "id": "am_response"
                      },
                      "op": "=",
                      "right": "am_response_event"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "EventExpr",
                        "id": "mission_command"
                      },
                      "op": "=",
                      "right": "mission_command_event"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "CASE_AttestationManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "am_mission_command_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_mission_command_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_metadata",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "am_request",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "am_response",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::COMP_TYPE",
              "value": "ATTESTATION"
            },
            {
              "name": "CASE_Properties::COMP_IMPL",
              "value": "CakeML"
            },
            {
              "name": "CASE_Properties::COMP_SPEC",
              "value": "Req001_AttestationManager"
            },
            {
              "name": "CASE_Properties::CACHE_TIMEOUT",
              "value": "30"
            },
            {
              "name": "CASE_Properties::CACHE_SIZE",
              "value": "4"
            },
            {
              "name": "CASE_Properties::LOG_SIZE",
              "value": "100"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_RadioDriver_AttestationManager",
                    "label": "Only valid messages from the ground station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "am_mission_command_out"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req001_AttestationManager",
                    "label": "The Attestation Manager shall only forward trusted messages",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "TRUSTED_MESSAGE",
                        "args": [
                          "am_mission_command_out"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.TRUSTED",
                          "args": [
                            "am_mission_command_out.null.null"
                          ]
                        },
                        "op": "=>",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": "am_mission_command_out",
                          "op": "=",
                          "right": "am_mission_command_in"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "CASE_AttestationManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread",
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_response_msg",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "UnaryExpr",
                      "operand": {
                        "kind": "FnCallExpr",
                        "function": "CASE_Model_Transformations.NULL_MESSAGE",
                        "args": [
                          "am_response.header"
                        ]
                      },
                      "op": "not"
                    }
                  },
                  {
                    "kind": "FnDefExpr",
                    "name": "MSG_CTR",
                    "args": [
                      {
                        "name": "null_msg",
                        "type": "bool"
                      }
                    ],
                    "type": "int",
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "null_msg",
                      "then": "0",
                      "else": "1"
                    }
                  },
                  {
                    "kind": "PropertyStatement",
                    "name": "one_incoming_message",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "MSG_CTR",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.NULL_MESSAGE",
                              "args": [
                                "am_mission_command_in.null"
                              ]
                            }
                          ]
                        },
                        "op": "+",
                        "right": {
                          "kind": "FnCallExpr",
                          "function": "MSG_CTR",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.NULL_MESSAGE",
                              "args": [
                                "am_response.header"
                              ]
                            }
                          ]
                        }
                      },
                      "op": "<=",
                      "right": "1"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": "one_incoming_message"
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "msg_src",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "UnaryExpr",
                        "operand": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            "am_mission_command_in.null"
                          ]
                        },
                        "op": "not"
                      },
                      "then": "am_mission_command_in.null.null",
                      "else": "CASE_Model_Transformations.NULL_ID"
                    }
                  },
                  {
                    "kind": "FnDefExpr",
                    "name": "GET_HEADER",
                    "args": [
                      {
                        "name": "src",
                        "type": "int"
                      }
                    ],
                    "type": "CASE_MsgHeader.Impl",
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "am_mission_command_in.null.src",
                        "op": "=",
                        "right": "src"
                      },
                      "then": "am_mission_command_in.null",
                      "else": "CASE_Model_Transformations.NULL_HEADER"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_request_msg",
                        "type": "CASE_AttestationRequestMsg.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_msg",
                      "then": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            {
                              "kind": "FnCallExpr",
                              "function": "GET_HEADER",
                              "args": [
                                "msg_src"
                              ]
                            }
                          ]
                        },
                        "then": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "UnaryExpr",
                              "operand": {
                                "kind": "FnCallExpr",
                                "function": "CASE_Model_Transformations.IN_CACHE",
                                "args": [
                                  "msg_src"
                                ]
                              },
                              "op": "not"
                            },
                            "op": "or",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.IS_STALE",
                              "args": [
                                "msg_src"
                              ]
                            }
                          },
                          "then": {
                            "kind": "RecordExpr",
                            "recordType": "CASE_AttestationRequestMsg.null",
                            "value": {
                              "null": {
                                "kind": "RecordExpr",
                                "recordType": "CASE_MsgHeader.null",
                                "value": {
                                  "null": "true"
                                }
                              }
                            }
                          },
                          "else": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE"
                        }
                      }
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_mission_command_out_msg",
                        "type": "Command.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "am_response_msg",
                      "then": {
                        "kind": "RecordExpr",
                        "recordType": "Command.null",
                        "value": {
                          "null": "am_mission_command_out.pattern",
                          "Map": "am_mission_command_out.map"
                        }
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.NULL_MESSAGE",
                          "args": [
                            "am_mission_command_in.null"
                          ]
                        },
                        "then": "am_mission_command_in",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "UnaryExpr",
                              "operand": {
                                "kind": "FnCallExpr",
                                "function": "CASE_Model_Transformations.IN_CACHE",
                                "args": [
                                  "msg_src"
                                ]
                              },
                              "op": "not"
                            },
                            "op": "or",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.IS_STALE",
                              "args": [
                                "msg_src"
                              ]
                            }
                          },
                          "then": {
                            "kind": "RecordExpr",
                            "recordType": "Command.null",
                            "value": {
                              "null": "am_mission_command_out.pattern",
                              "Map": "am_mission_command_out.map"
                            }
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "FnCallExpr",
                              "function": "CASE_Model_Transformations.PASS_ATTESTATION",
                              "args": [
                                "msg_src"
                              ]
                            },
                            "then": "am_mission_command_in",
                            "else": {
                              "kind": "RecordExpr",
                              "recordType": "Command.null",
                              "value": {
                                "null": "am_mission_command_out.pattern",
                                "Map": "am_mission_command_out.map"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "kind": "ConstStatement",
                    "name": "AM_CACHE_SIZE",
                    "type": "int",
                    "expr": "4"
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "was_response_requested",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_response_msg",
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.GET_STATUS",
                          "args": [
                            "am_response.header.src"
                          ]
                        },
                        "op": "=",
                        "right": "CASE_Model_Transformations.AM_REQUESTING"
                      }
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "am_status",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "am_response_msg",
                        "op": "and",
                        "right": "am_response.status"
                      },
                      "then": "CASE_Model_Transformations.AM_PASS",
                      "else": "CASE_Model_Transformations.AM_FAIL"
                    }
                  },
                  {
                    "kind": "EqStatement",
                    "left": [
                      {
                        "name": "src_added",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": "was_response_requested",
                      "then": {
                        "kind": "FnCallExpr",
                        "function": "CASE_Model_Transformations.ADD_RECORD",
                        "args": [
                          "am_response.header.src",
                          "am_status",
                          "0",
                          "AM_CACHE_SIZE"
                        ]
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "UnaryExpr",
                          "operand": {
                            "kind": "BinaryExpr",
                            "left": "am_request_msg",
                            "op": "=",
                            "right": "CASE_Model_Transformations.NULL_AM_REQUEST_MESSAGE"
                          },
                          "op": "not"
                        },
                        "then": {
                          "kind": "FnCallExpr",
                          "function": "CASE_Model_Transformations.ADD_RECORD",
                          "args": [
                            "msg_src",
                            "CASE_Model_Transformations.AM_REQUESTING",
                            "0",
                            "AM_CACHE_SIZE"
                          ]
                        },
                        "else": "false"
                      }
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_request",
                      "op": "=",
                      "right": "am_request_msg"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "was_response_requested",
                      "op": "=>",
                      "right": "src_added"
                    }
                  },
                  {
                    "kind": "AssertStatement",
                    "name": "null",
                    "label": "null",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "am_mission_command_out",
                      "op": "=",
                      "right": "am_mission_command_out_msg"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "FlightPlanner",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "out"
            },
            {
              "name": "recv_map",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "request_nofly_zones",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "nofly_zones",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req004_FP",
                    "label": "The FlightPlanner shall receive a well-formed command from the GroundStation",
                    "expr": "false"
                  },
                  {
                    "kind": "AssumeStatement",
                    "name": "Req003_FlightPlanner",
                    "label": "The FlightPlanner shall only accept messages from a trusted GroundStation",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "TRUSTED_MESSAGE",
                      "args": [
                        "recv_map"
                      ]
                    }
                  },
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_FlightPlanner",
                    "label": "The Flight Planner shall receive a valid message from the Ground Station",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "VALID_MESSAGE",
                      "args": [
                        "recv_map"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_FlightPlanner",
                    "label": "The Flight Planner shall generate a valid mission",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission",
                      "args": [
                        "flight_plan"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "FlightPlanner.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "NoFlyZoneDatabase",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "map",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "zones",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "NoFlyZoneDatabase.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "WaypointManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "in"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_WaypointManager",
                    "label": "The Waypoint Manager shall receive a well-formed mission",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission",
                      "args": [
                        "flight_plan"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_WaypointManager",
                    "label": "The Waypoint Manager shall output a well-formed mission window",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission_window",
                      "args": [
                        "mission_window"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "WaypointManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "CameraManager",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "flight_plan",
              "kind": "DataPort",
              "direction": "in"
            },
            {
              "name": "position_status",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "gimbal_command",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "CameraManager.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "UARTDriver",
          "kind": "ComponentType",
          "category": "thread",
          "features": [
            {
              "name": "status",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "mission_window",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_UARTDriver",
                    "label": "Well-formed mission window",
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "good_mission_window",
                      "args": [
                        "mission_window"
                      ]
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_UARTDriver",
                    "label": "A CRC shall be appended to the message to determine message correctness",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "send_data.crc",
                      "op": "=",
                      "right": "true"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "UARTDriver.Impl",
          "kind": "ComponentImplementation",
          "category": "thread"
        },
        {
          "name": "SW",
          "kind": "ComponentType",
          "category": "process",
          "features": [
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "uart_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "uart_send",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "wifi_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "wifi_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "annexes": [
            {
              "name": "agree",
              "parsedAnnexSubclause": {
                "statements": [
                  {
                    "kind": "AssumeStatement",
                    "name": "Req001_SW",
                    "label": "The Mission Computer shall only accept commands intended for this UAV",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "radio_recv.header.dst",
                      "op": "=",
                      "right": "CASE_UAV_ID"
                    }
                  },
                  {
                    "kind": "GuaranteeStatement",
                    "name": "Req002_SW",
                    "label": "The Mission Computer shall output a valid mission window to the Flight Controller",
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "uart_send.crc",
                      "op": "=",
                      "right": "true"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "SW.Impl1",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "AM",
              "category": "thread",
              "classifier": "SW::CASE_AttestationManager.Impl"
            },
            {
              "name": "FPLN",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "AM.am_mission_command_in",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "AM.am_mission_command_out",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c19",
              "kind": "port",
              "source": "AM.am_request",
              "destination": "RADIO.am_request",
              "bidirectional": "false"
            },
            {
              "name": "c20",
              "kind": "port",
              "source": "RADIO.am_response",
              "destination": "AM.am_response",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        },
        {
          "name": "SW.Impl",
          "kind": "ComponentImplementation",
          "category": "process",
          "subcomponents": [
            {
              "name": "RADIO",
              "category": "thread",
              "classifier": "SW::RadioDriver.Impl"
            },
            {
              "name": "FPLN",
              "category": "thread",
              "classifier": "SW::FlightPlanner.Impl"
            },
            {
              "name": "WPM",
              "category": "thread",
              "classifier": "SW::WaypointManager.Impl"
            },
            {
              "name": "CM",
              "category": "thread",
              "classifier": "SW::CameraManager.Impl"
            },
            {
              "name": "UART",
              "category": "thread",
              "classifier": "SW::UARTDriver.Impl"
            },
            {
              "name": "WIFI",
              "category": "thread",
              "classifier": "SW::WifiDriver.Impl"
            },
            {
              "name": "NFDB",
              "category": "thread",
              "classifier": "SW::NoFlyZoneDatabase.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO.send_data",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "RADIO.mission_command",
              "destination": "FPLN.recv_map",
              "bidirectional": "false"
            },
            {
              "name": "c5",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "WPM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c6",
              "kind": "port",
              "source": "FPLN.request_nofly_zones",
              "destination": "NFDB.map",
              "bidirectional": "false"
            },
            {
              "name": "c7",
              "kind": "port",
              "source": "NFDB.zones",
              "destination": "FPLN.nofly_zones",
              "bidirectional": "false"
            },
            {
              "name": "c8",
              "kind": "port",
              "source": "WPM.mission_window",
              "destination": "UART.mission_window",
              "bidirectional": "false"
            },
            {
              "name": "c9",
              "kind": "port",
              "source": "UART.status",
              "destination": "WPM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c10",
              "kind": "port",
              "source": "UART.status",
              "destination": "FPLN.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c11",
              "kind": "port",
              "source": "UART.status",
              "destination": "RADIO.status",
              "bidirectional": "false"
            },
            {
              "name": "c12",
              "kind": "port",
              "source": "UART.send_data",
              "destination": "uart_send",
              "bidirectional": "false"
            },
            {
              "name": "c13",
              "kind": "port",
              "source": "uart_recv",
              "destination": "UART.recv_data",
              "bidirectional": "false"
            },
            {
              "name": "c14",
              "kind": "port",
              "source": "FPLN.flight_plan",
              "destination": "CM.flight_plan",
              "bidirectional": "false"
            },
            {
              "name": "c15",
              "kind": "port",
              "source": "UART.status",
              "destination": "CM.position_status",
              "bidirectional": "false"
            },
            {
              "name": "c16",
              "kind": "port",
              "source": "CM.gimbal_command",
              "destination": "WIFI.gimbal_command",
              "bidirectional": "false"
            },
            {
              "name": "c17",
              "kind": "port",
              "source": "WIFI.send_data",
              "destination": "wifi_send",
              "bidirectional": "false"
            },
            {
              "name": "c18",
              "kind": "port",
              "source": "wifi_recv",
              "destination": "WIFI.recv_data",
              "bidirectional": "false"
            }
          ]
        }
      ],
      "annexes": [
        {
          "name": "agree",
          "parsedAnnexLibrary": {
            "statements": [
              {
                "kind": "ConstStatement",
                "name": "CASE_UAV_ID",
                "type": "int",
                "expr": "42"
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_ID",
                "type": "int",
                "expr": "0"
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_HEADER",
                "type": "CASE_MsgHeader.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_MsgHeader.null",
                  "value": {
                    "null": "false"
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "NULL_MESSAGE",
                "args": [
                  {
                    "name": "header",
                    "type": "CASE_MsgHeader.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": "header",
                  "op": "=",
                  "right": "NULL_HEADER"
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "VALID_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": "msg.null.null",
                        "op": ">",
                        "right": "0"
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": "msg.null.null",
                        "op": "=",
                        "right": "CASE_UAV_ID"
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "msg.null.null",
                      "op": "=",
                      "right": "true"
                    }
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "TRUSTED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.TRUSTED",
                    "args": [
                      "msg.null.null"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "WELL_FORMED_MESSAGE",
                "args": [
                  {
                    "name": "msg",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "CASE_Model_Transformations.NULL_MESSAGE",
                    "args": [
                      "msg.null"
                    ]
                  },
                  "op": "or",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_command",
                    "args": [
                      "msg"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_coordinate",
                "args": [
                  {
                    "name": "coord",
                    "type": "Coordinate.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": "coord.latitude",
                            "op": ">=",
                            "right": {
                              "kind": "UnaryExpr",
                              "operand": "90",
                              "op": "-"
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": "coord.latitude",
                            "op": "<=",
                            "right": "90"
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": "coord.longitude",
                          "op": ">=",
                          "right": {
                            "kind": "UnaryExpr",
                            "operand": "180",
                            "op": "-"
                          }
                        }
                      },
                      "op": "and",
                      "right": {
                        "kind": "BinaryExpr",
                        "left": "coord.longitude",
                        "op": "<=",
                        "right": "180"
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "coord.altitude",
                      "op": ">=",
                      "right": "0"
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": "coord.altitude",
                    "op": "<=",
                    "right": "15000"
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_map",
                "args": [
                  {
                    "name": "map",
                    "type": "Map.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "map.wp1"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "map.wp2"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "map.wp3"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "map.wp4"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_pattern",
                "args": [
                  {
                    "name": "pattern",
                    "type": "FlightPattern.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": "pattern",
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": "FlightPattern",
                        "value": "ZigZag"
                      }
                    },
                    "op": "or",
                    "right": {
                      "kind": "BinaryExpr",
                      "left": "pattern",
                      "op": "=",
                      "right": {
                        "kind": "AadlEnumerator",
                        "type": "FlightPattern",
                        "value": "StraightLine"
                      }
                    }
                  },
                  "op": "or",
                  "right": {
                    "kind": "BinaryExpr",
                    "left": "pattern",
                    "op": "=",
                    "right": {
                      "kind": "AadlEnumerator",
                      "type": "FlightPattern",
                      "value": "Perimeter"
                    }
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_command",
                "args": [
                  {
                    "name": "cmd",
                    "type": "Command.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "FnCallExpr",
                    "function": "good_map",
                    "args": [
                      "cmd.map"
                    ]
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_pattern",
                    "args": [
                      "cmd.pattern"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_mission",
                "args": [
                  {
                    "name": "mission",
                    "type": "Mission.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "FnCallExpr",
                                    "function": "good_coordinate",
                                    "args": [
                                      "mission.wp1"
                                    ]
                                  },
                                  "op": "and",
                                  "right": {
                                    "kind": "FnCallExpr",
                                    "function": "good_coordinate",
                                    "args": [
                                      "mission.wp2"
                                    ]
                                  }
                                },
                                "op": "and",
                                "right": {
                                  "kind": "FnCallExpr",
                                  "function": "good_coordinate",
                                  "args": [
                                    "mission.wp3"
                                  ]
                                }
                              },
                              "op": "and",
                              "right": {
                                "kind": "FnCallExpr",
                                "function": "good_coordinate",
                                "args": [
                                  "mission.wp4"
                                ]
                              }
                            },
                            "op": "and",
                            "right": {
                              "kind": "FnCallExpr",
                              "function": "good_coordinate",
                              "args": [
                                "mission.wp5"
                              ]
                            }
                          },
                          "op": "and",
                          "right": {
                            "kind": "FnCallExpr",
                            "function": "good_coordinate",
                            "args": [
                              "mission.wp6"
                            ]
                          }
                        },
                        "op": "and",
                        "right": {
                          "kind": "FnCallExpr",
                          "function": "good_coordinate",
                          "args": [
                            "mission.wp7"
                          ]
                        }
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "mission.wp8"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "mission.wp9"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "mission.wp10"
                    ]
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "good_mission_window",
                "args": [
                  {
                    "name": "win",
                    "type": "MissionWindow.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "BinaryExpr",
                      "left": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "win.wp1"
                        ]
                      },
                      "op": "and",
                      "right": {
                        "kind": "FnCallExpr",
                        "function": "good_coordinate",
                        "args": [
                          "win.wp2"
                        ]
                      }
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "good_coordinate",
                      "args": [
                        "win.wp3"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "FnCallExpr",
                    "function": "good_coordinate",
                    "args": [
                      "win.wp4"
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Data_Model",
    "kind": "PropertySet",
    "properties": [
      {
        "name": "Base_Type",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "ClassifierType",
            "name": [
              "data"
            ]
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Code_Set",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Digits",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Scale",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Data_Representation",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Array",
            "Boolean",
            "Character",
            "Enum",
            "Float",
            "Fixed",
            "Integer",
            "String",
            "Struct",
            "Union"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "MyDimension",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Dimension",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlInteger"
          }
        },
        "appliesTo": [
          "data",
          "data port",
          "event data port",
          "data access"
        ]
      },
      {
        "name": "Element_Names",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Enumerators",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "IEEE754_Precision",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Simple",
            "Double"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Initial_Value",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Integer_Range",
        "inherit": "false",
        "propertyType": {
          "kind": "RangeType",
          "numberType": {
            "kind": "AadlInteger"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Measurement_Unit",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Number_Representation",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "Signed",
            "Unsigned"
          ]
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Real_Range",
        "inherit": "false",
        "propertyType": {
          "kind": "RangeType",
          "numberType": {
            "kind": "AadlReal"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      },
      {
        "name": "Representation",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "AadlString"
          }
        },
        "appliesTo": [
          "data",
          "feature"
        ]
      }
    ]
  },
  {
    "name": "Base_Types",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "Data_Model"
      ],
      "components": [
        {
          "name": "Boolean",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Boolean"
            }
          ]
        },
        {
          "name": "Integer",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Integer"
            }
          ]
        },
        {
          "name": "Integer_8",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "1"
            }
          ]
        },
        {
          "name": "Integer_16",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "2"
            }
          ]
        },
        {
          "name": "Integer_32",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "4"
            }
          ]
        },
        {
          "name": "Integer_64",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Signed"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "8"
            }
          ]
        },
        {
          "name": "Unsigned_8",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "1"
            }
          ]
        },
        {
          "name": "Unsigned_16",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "2"
            }
          ]
        },
        {
          "name": "Unsigned_32",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "4"
            }
          ]
        },
        {
          "name": "Unsigned_64",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Number_Representation",
              "value": "Unsigned"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "8"
            }
          ]
        },
        {
          "name": "Natural",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Integer_Range",
              "value": "0 .. Max_Target_Integer"
            }
          ]
        },
        {
          "name": "Float",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Float"
            }
          ]
        },
        {
          "name": "Float_32",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::IEEE754_Precision",
              "value": "Simple"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "4"
            }
          ]
        },
        {
          "name": "Float_64",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::IEEE754_Precision",
              "value": "Double"
            },
            {
              "name": "Memory_Properties::Data_Size",
              "value": "8"
            }
          ]
        },
        {
          "name": "Character",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "Character"
            }
          ]
        },
        {
          "name": "String",
          "kind": "ComponentType",
          "category": "data",
          "properties": [
            {
              "name": "Data_Model::Data_Representation",
              "value": "String"
            }
          ]
        }
      ]
    }
  },
  {
    "name": "CASE_Properties",
    "kind": "PropertySet",
    "properties": [
      {
        "name": "COMP_TYPE",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "FILTER",
            "ATTESTATION",
            "MONITOR",
            "ROUTER",
            "ISOLATOR",
            "COMM_DRIVER"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "COMP_IMPL",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "thread"
        ]
      },
      {
        "name": "COMP_SPEC",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlString"
        },
        "appliesTo": [
          "thread"
        ]
      },
      {
        "name": "CACHE_TIMEOUT",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CACHE_SIZE",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "LOG_SIZE",
        "inherit": "false",
        "propertyType": {
          "kind": "AadlInteger"
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "BOUNDARY",
        "inherit": "false",
        "propertyType": {
          "kind": "ListType",
          "elementType": {
            "kind": "EnumerationType",
            "values": [
              "TRUSTED",
              "PHYSICAL"
            ]
          }
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "CONFIDENTIALITY",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "INTEGRITY",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "AVAILABILITY",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "appliesTo": [
          "system",
          "process",
          "thread",
          "device",
          "abstract"
        ]
      },
      {
        "name": "COMM_MODALITY",
        "inherit": "false",
        "propertyType": {
          "kind": "EnumerationType",
          "values": [
            "RF",
            "WIFI",
            "WIRED_ETHERNET",
            "SERIAL",
            "BT"
          ]
        },
        "appliesTo": [
          "bus"
        ]
      }
    ]
  },
  {
    "name": "CASE_Model_Transformations",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "Base_Types",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "CASE_MsgHeader",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_MsgHeader.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "dst",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "HMAC",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            }
          ]
        },
        {
          "name": "CASE_RF_Msg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_RF_Msg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            },
            {
              "name": "message",
              "category": "data",
              "classifier": "Base_Types::String"
            }
          ]
        },
        {
          "name": "CASE_AttestationRequestMsg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_AttestationRequestMsg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            }
          ]
        },
        {
          "name": "CASE_AttestationResponseMsg",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_AttestationResponseMsg.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "header",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_MsgHeader.Impl"
            },
            {
              "name": "status",
              "category": "data",
              "classifier": "Base_Types::Boolean"
            }
          ]
        },
        {
          "name": "CASE_AttestationCacheRecord",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_AttestationCacheRecord.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "trusted",
              "category": "data",
              "classifier": "Base_Types::Integer"
            },
            {
              "name": "timeout",
              "category": "data",
              "classifier": "Base_Types::Integer"
            }
          ]
        },
        {
          "name": "CASE_AttestationCache",
          "kind": "ComponentType",
          "category": "data"
        },
        {
          "name": "CASE_AttestationCache.Impl",
          "kind": "ComponentImplementation",
          "category": "data",
          "subcomponents": [
            {
              "name": "src1",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src2",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src3",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src4",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src5",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            },
            {
              "name": "src6",
              "category": "data",
              "classifier": "CASE_Model_Transformations::CASE_AttestationCacheRecord.Impl"
            }
          ]
        }
      ],
      "annexes": [
        {
          "name": "Agree",
          "parsedAnnexLibrary": {
            "statements": [
              {
                "kind": "ConstStatement",
                "name": "NULL_ID",
                "type": "int",
                "expr": "0"
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_HEADER",
                "type": "CASE_MsgHeader.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_MsgHeader.null",
                  "value": {
                    "null": "false"
                  }
                }
              },
              {
                "kind": "FnDefExpr",
                "name": "NULL_MESSAGE",
                "args": [
                  {
                    "name": "header",
                    "type": "CASE_MsgHeader.Impl"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": "header",
                  "op": "=",
                  "right": "NULL_HEADER"
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_AM_REQUEST_MESSAGE",
                "type": "CASE_AttestationRequestMsg.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_AttestationRequestMsg.null",
                  "value": {
                    "null": "NULL_HEADER"
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_CACHE",
                "type": "CASE_AttestationCache.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_AttestationCache.null",
                  "value": {
                    "null": "NULL_RECORD"
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "NULL_RECORD",
                "type": "CASE_AttestationCacheRecord.Impl",
                "expr": {
                  "kind": "RecordExpr",
                  "recordType": "CASE_AttestationCacheRecord.null",
                  "value": {
                    "null": "0"
                  }
                }
              },
              {
                "kind": "NodeDefExpr",
                "name": "CACHE",
                "args": [
                  {
                    "name": "new_cache",
                    "type": "CASE_AttestationCache.Impl"
                  }
                ],
                "returns": [
                  {
                    "name": "cache",
                    "type": "CASE_AttestationCache.Impl"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "cache",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "NULL_CACHE",
                      "op": "->",
                      "right": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "new_cache",
                          "op": "=",
                          "right": "NULL_CACHE"
                        },
                        "then": {
                          "kind": "PreExpr",
                          "expr": "cache"
                        },
                        "else": "new_cache"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "FnDefExpr",
                "name": "TRUSTED",
                "args": [
                  {
                    "name": "src",
                    "type": "Integer"
                  }
                ],
                "type": "bool",
                "expr": {
                  "kind": "BinaryExpr",
                  "left": {
                    "kind": "BinaryExpr",
                    "left": {
                      "kind": "FnCallExpr",
                      "function": "IN_CACHE",
                      "args": [
                        "src"
                      ]
                    },
                    "op": "and",
                    "right": {
                      "kind": "FnCallExpr",
                      "function": "PASS_ATTESTATION",
                      "args": [
                        "src"
                      ]
                    }
                  },
                  "op": "and",
                  "right": {
                    "kind": "UnaryExpr",
                    "operand": {
                      "kind": "FnCallExpr",
                      "function": "IS_STALE",
                      "args": [
                        "src"
                      ]
                    },
                    "op": "not"
                  }
                }
              },
              {
                "kind": "ConstStatement",
                "name": "AM_FAIL",
                "type": "int",
                "expr": "0"
              },
              {
                "kind": "ConstStatement",
                "name": "AM_PASS",
                "type": "int",
                "expr": "1"
              },
              {
                "kind": "ConstStatement",
                "name": "AM_REQUESTING",
                "type": "int",
                "expr": "2"
              },
              {
                "kind": "NodeDefExpr",
                "name": "IN_CACHE",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": "bool"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "UnaryExpr",
                      "operand": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "FnCallExpr",
                          "function": "GET_RECORD_BY_NAME",
                          "args": [
                            "src"
                          ]
                        },
                        "op": "=",
                        "right": "NULL_RECORD"
                      },
                      "op": "not"
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "GET_STATUS",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": "int"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "GET_RECORD_BY_NAME",
                      "args": [
                        "src"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": "int"
                      }
                    ],
                    "expr": "record.trusted"
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "PASS_ATTESTATION",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": "bool"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "GET_RECORD_BY_NAME",
                      "args": [
                        "src"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "BinaryExpr",
                      "left": "record.trusted",
                      "op": "=",
                      "right": "AM_PASS"
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "IS_STALE",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "result",
                    "type": "bool"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "GET_RECORD_BY_NAME",
                      "args": [
                        "src"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "result",
                        "type": "bool"
                      }
                    ],
                    "expr": "false"
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "CREATE_RECORD",
                "args": [
                  {
                    "name": "new_src",
                    "type": "int"
                  },
                  {
                    "name": "new_trusted",
                    "type": "int"
                  },
                  {
                    "name": "new_timeout",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "new_record",
                    "type": "CASE_AttestationCacheRecord.Impl"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "new_record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "RecordExpr",
                      "recordType": "CASE_AttestationCacheRecord.null",
                      "value": {
                        "null": "new_timeout"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "ADD_RECORD",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  },
                  {
                    "name": "trusted",
                    "type": "int"
                  },
                  {
                    "name": "timeout",
                    "type": "int"
                  },
                  {
                    "name": "max_idx",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "success",
                    "type": "bool"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "free_idx",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "GET_FREE_IDX",
                      "args": [
                        "max_idx"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "success",
                        "type": "bool"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "FnCallExpr",
                        "function": "IN_CACHE",
                        "args": [
                          "src"
                        ]
                      },
                      "then": {
                        "kind": "UnaryExpr",
                        "operand": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "FnCallExpr",
                            "function": "WRITE_CACHE",
                            "args": [
                              {
                                "kind": "FnCallExpr",
                                "function": "GET_IDX_BY_NAME",
                                "args": [
                                  "src"
                                ]
                              },
                              {
                                "kind": "FnCallExpr",
                                "function": "CREATE_RECORD",
                                "args": [
                                  "src",
                                  "trusted",
                                  "timeout"
                                ]
                              }
                            ]
                          },
                          "op": "=",
                          "right": "NULL_CACHE"
                        },
                        "op": "not"
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "free_idx",
                          "op": ">",
                          "right": "0"
                        },
                        "then": {
                          "kind": "UnaryExpr",
                          "operand": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "FnCallExpr",
                              "function": "WRITE_CACHE",
                              "args": [
                                "free_idx",
                                {
                                  "kind": "FnCallExpr",
                                  "function": "CREATE_RECORD",
                                  "args": [
                                    "src",
                                    "trusted",
                                    "timeout"
                                  ]
                                }
                              ]
                            },
                            "op": "=",
                            "right": "NULL_CACHE"
                          },
                          "op": "not"
                        },
                        "else": "false"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "GET_FREE_IDX",
                "args": [
                  {
                    "name": "max",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "idx",
                    "type": "int"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "CACHE",
                      "args": [
                        "NULL_CACHE"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "idx",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": {
                          "kind": "BinaryExpr",
                          "left": "c.src1",
                          "op": "=",
                          "right": "NULL_RECORD"
                        },
                        "op": "and",
                        "right": {
                          "kind": "BinaryExpr",
                          "left": "max",
                          "op": ">=",
                          "right": "1"
                        }
                      },
                      "then": "1",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": {
                            "kind": "BinaryExpr",
                            "left": "c.src2",
                            "op": "=",
                            "right": "NULL_RECORD"
                          },
                          "op": "and",
                          "right": {
                            "kind": "BinaryExpr",
                            "left": "max",
                            "op": ">=",
                            "right": "2"
                          }
                        },
                        "then": "2",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": {
                              "kind": "BinaryExpr",
                              "left": "c.src3",
                              "op": "=",
                              "right": "NULL_RECORD"
                            },
                            "op": "and",
                            "right": {
                              "kind": "BinaryExpr",
                              "left": "max",
                              "op": ">=",
                              "right": "3"
                            }
                          },
                          "then": "3",
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": {
                                "kind": "BinaryExpr",
                                "left": "c.src4",
                                "op": "=",
                                "right": "NULL_RECORD"
                              },
                              "op": "and",
                              "right": {
                                "kind": "BinaryExpr",
                                "left": "max",
                                "op": ">=",
                                "right": "4"
                              }
                            },
                            "then": "4",
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": {
                                  "kind": "BinaryExpr",
                                  "left": "c.src5",
                                  "op": "=",
                                  "right": "NULL_RECORD"
                                },
                                "op": "and",
                                "right": {
                                  "kind": "BinaryExpr",
                                  "left": "max",
                                  "op": ">=",
                                  "right": "5"
                                }
                              },
                              "then": "5",
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": {
                                    "kind": "BinaryExpr",
                                    "left": "c.src6",
                                    "op": "=",
                                    "right": "NULL_RECORD"
                                  },
                                  "op": "and",
                                  "right": {
                                    "kind": "BinaryExpr",
                                    "left": "max",
                                    "op": ">=",
                                    "right": "6"
                                  }
                                },
                                "then": "6",
                                "else": "0"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "GET_RECORD_BY_IDX",
                "args": [
                  {
                    "name": "idx",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "record",
                    "type": "CASE_AttestationCacheRecord.Impl"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "CACHE",
                      "args": [
                        "NULL_CACHE"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "idx",
                        "op": "=",
                        "right": "1"
                      },
                      "then": "c.src1",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "idx",
                          "op": "=",
                          "right": "2"
                        },
                        "then": "c.src2",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": "idx",
                            "op": "=",
                            "right": "3"
                          },
                          "then": "c.src3",
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": "idx",
                              "op": "=",
                              "right": "4"
                            },
                            "then": "c.src4",
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": "idx",
                                "op": "=",
                                "right": "5"
                              },
                              "then": "c.src5",
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": "idx",
                                  "op": "=",
                                  "right": "6"
                                },
                                "then": "c.src6",
                                "else": "NULL_RECORD"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "GET_RECORD_BY_NAME",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "record",
                    "type": "CASE_AttestationCacheRecord.Impl"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "CACHE",
                      "args": [
                        "NULL_CACHE"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "record",
                        "type": "CASE_AttestationCacheRecord.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "c.src1.src",
                        "op": "=",
                        "right": "src"
                      },
                      "then": "c.src1",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "c.src2.src",
                          "op": "=",
                          "right": "src"
                        },
                        "then": "c.src2",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": "c.src3.src",
                            "op": "=",
                            "right": "src"
                          },
                          "then": "c.src3",
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": "c.src4.src",
                              "op": "=",
                              "right": "src"
                            },
                            "then": "c.src4",
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": "c.src5.src",
                                "op": "=",
                                "right": "src"
                              },
                              "then": "c.src5",
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": "c.src6.src",
                                  "op": "=",
                                  "right": "src"
                                },
                                "then": "c.src6",
                                "else": "NULL_RECORD"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "GET_IDX_BY_NAME",
                "args": [
                  {
                    "name": "src",
                    "type": "int"
                  }
                ],
                "returns": [
                  {
                    "name": "idx",
                    "type": "int"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "c",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "FnCallExpr",
                      "function": "CACHE",
                      "args": [
                        "NULL_CACHE"
                      ]
                    }
                  },
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "idx",
                        "type": "int"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "c.src1.src",
                        "op": "=",
                        "right": "src"
                      },
                      "then": "1",
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "c.src2.src",
                          "op": "=",
                          "right": "src"
                        },
                        "then": "2",
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": "c.src3.src",
                            "op": "=",
                            "right": "src"
                          },
                          "then": "3",
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": "c.src4.src",
                              "op": "=",
                              "right": "src"
                            },
                            "then": "4",
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": "c.src5.src",
                                "op": "=",
                                "right": "src"
                              },
                              "then": "5",
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": "c.src6.src",
                                  "op": "=",
                                  "right": "src"
                                },
                                "then": "6",
                                "else": "0"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "kind": "NodeDefExpr",
                "name": "WRITE_CACHE",
                "args": [
                  {
                    "name": "idx",
                    "type": "int"
                  },
                  {
                    "name": "record",
                    "type": "CASE_AttestationCacheRecord.Impl"
                  }
                ],
                "returns": [
                  {
                    "name": "new_cache",
                    "type": "CASE_AttestationCache.Impl"
                  }
                ],
                "body": [
                  {
                    "kind": "NodeEq",
                    "left": [
                      {
                        "name": "new_cache",
                        "type": "CASE_AttestationCache.Impl"
                      }
                    ],
                    "expr": {
                      "kind": "IfThenElseExpr",
                      "if": {
                        "kind": "BinaryExpr",
                        "left": "idx",
                        "op": "=",
                        "right": "1"
                      },
                      "then": {
                        "kind": "FnCallExpr",
                        "function": "CACHE",
                        "args": [
                          {
                            "kind": "RecordExpr",
                            "recordType": "CASE_AttestationCache.null",
                            "value": {
                              "null": {
                                "kind": "FnCallExpr",
                                "function": "GET_RECORD_BY_IDX",
                                "args": [
                                  "6"
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "else": {
                        "kind": "IfThenElseExpr",
                        "if": {
                          "kind": "BinaryExpr",
                          "left": "idx",
                          "op": "=",
                          "right": "2"
                        },
                        "then": {
                          "kind": "FnCallExpr",
                          "function": "CACHE",
                          "args": [
                            {
                              "kind": "RecordExpr",
                              "recordType": "CASE_AttestationCache.null",
                              "value": {
                                "null": {
                                  "kind": "FnCallExpr",
                                  "function": "GET_RECORD_BY_IDX",
                                  "args": [
                                    "6"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "else": {
                          "kind": "IfThenElseExpr",
                          "if": {
                            "kind": "BinaryExpr",
                            "left": "idx",
                            "op": "=",
                            "right": "3"
                          },
                          "then": {
                            "kind": "FnCallExpr",
                            "function": "CACHE",
                            "args": [
                              {
                                "kind": "RecordExpr",
                                "recordType": "CASE_AttestationCache.null",
                                "value": {
                                  "null": {
                                    "kind": "FnCallExpr",
                                    "function": "GET_RECORD_BY_IDX",
                                    "args": [
                                      "6"
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "else": {
                            "kind": "IfThenElseExpr",
                            "if": {
                              "kind": "BinaryExpr",
                              "left": "idx",
                              "op": "=",
                              "right": "4"
                            },
                            "then": {
                              "kind": "FnCallExpr",
                              "function": "CACHE",
                              "args": [
                                {
                                  "kind": "RecordExpr",
                                  "recordType": "CASE_AttestationCache.null",
                                  "value": {
                                    "null": {
                                      "kind": "FnCallExpr",
                                      "function": "GET_RECORD_BY_IDX",
                                      "args": [
                                        "6"
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "else": {
                              "kind": "IfThenElseExpr",
                              "if": {
                                "kind": "BinaryExpr",
                                "left": "idx",
                                "op": "=",
                                "right": "5"
                              },
                              "then": {
                                "kind": "FnCallExpr",
                                "function": "CACHE",
                                "args": [
                                  {
                                    "kind": "RecordExpr",
                                    "recordType": "CASE_AttestationCache.null",
                                    "value": {
                                      "null": {
                                        "kind": "FnCallExpr",
                                        "function": "GET_RECORD_BY_IDX",
                                        "args": [
                                          "6"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "else": {
                                "kind": "IfThenElseExpr",
                                "if": {
                                  "kind": "BinaryExpr",
                                  "left": "idx",
                                  "op": "=",
                                  "right": "6"
                                },
                                "then": {
                                  "kind": "FnCallExpr",
                                  "function": "CACHE",
                                  "args": [
                                    {
                                      "kind": "RecordExpr",
                                      "recordType": "CASE_AttestationCache.null",
                                      "value": {
                                        "null": "record"
                                      }
                                    }
                                  ]
                                },
                                "else": "NULL_CACHE"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "Resolute",
          "sourceText": "{**\n\t\t\n\t\t---------------------------\n\t\t-- MODEL TRANSFORMATIONS --\n\t\t---------------------------\n\t\t\n\t\t-- Top-level claim for proper insertion of a filter\n\t\tadd_filter(c : component, message_type : data) <=\n\t\t\t** \"Filter inserted before \" c **\n\t\t\tfilter_exists(c) and filter_not_bypassed(c, message_type) and filter_prop_checked()\n\t\t\t\n\t\t-- Top-level claim for proper insertion of attestation manager\n\t\tadd_attestation_manager(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"Attestation Manager added for communications driver \" comm_driver **\n\t\t\tattestation_manager_exists(comm_driver, attestation_manager) and attestation_manager_not_bypassed(comm_driver, attestation_manager) and attestation_manager_prop_checked()\t\t\t\n\t\t\n\t\t-- Top-level claim for proper insertion of a router\n\t\tadd_router(c : component) <=\n\t\t\t** \"Router inserted after \" c **\n\t\t\ttrue\n\t\n\t\t-- Top-level claim for proper insertion of a monitor\n\t\tadd_monitor(c : component) <=\n\t\t\t** \"Monitor inserted on \" c **\n\t\t\ttrue\n\t\t\n\t\t-- Top-level claim for proper insertion of an isolator\n\t\tadd_isolator(c : component) <=\n\t\t\t** \"Isolator added to \" c **\n\t\t\ttrue\t\n\t\t\n\t\t----------------\n\t\t-- SUB CLAIMS --\n\t\t----------------\n\t\n\t\t-- This connects to evidence that AGREE was previously run on the current version of the design.\n\t\tagree_prop_checked(c : component, property_id : string) <=\n\t\t\t** \"AGREE properties passed\" **\n\t\t\tAgreeLib.hasAgreeProperty(c, property_id) and analysis(\"AgreeCheck\")\t\n\t\t\n\t\t-- Ideally, we want to check that there's a filter anywhere between\n\t\t-- pairs of components (such as the ground station and flight planner).\n\t\t-- However, there's a bug in Resolute that prevents us from doing that.\n\t\t-- So for now, we just check to see if there is a filter immediately before \n\t\t-- the component on the communication pathway.\n\t\tfilter_exists(c : component) <=\n\t\t\t** \"A filter exists on the communication pathway immediately before \" c **\n\t\t\t-- get incoming connections\n\t\t\tlet in_conns : {connection} = {conn for (conn : connections(c)) | destination_component(conn) = c};\n\t\t\texists(conn : in_conns). is_filter(source_component(conn))\n\t\n\t\t-- Make sure there is no communication pathway that avoids the filter\n\t    filter_not_bypassed(c : component, message_type : data) <=\n\t\t    ** \"Filter cannot be bypassed\" **\n\t\t\t-- get incoming connections of type Command\n\t\t\tlet cmd_conns : {connection} = {conn for (conn : connections(c)) | \n\t\t\t\t\t\t\t\t\t\t\tdestination_component(conn) = c and has_type(conn) and type(conn) = message_type};\n\t\t\t-- show that all of these connections come from a filter\n\t\t\tforall(conn : cmd_conns). is_filter(source_component(conn))\n\t\n\t    -- This should connect to some evidence that the filter was correctly generated\n\t    -- and that the proof was emitted and checked.\n\t    -- However, this funcionality has not yet been implemented\n\t    filter_prop_checked() <=\n\t\t    ** \"Filter property implemented by CakeML\" **\n\t\t    forall (c : component). is_filter(c)\n\t\t       => has_property(c, CASE_Properties::COMP_IMPL) and property(c, CASE_Properties::COMP_IMPL) = \"CAKEML\"\n\t\t       and filter_proof_checked()\n\t\t       \n\t\t-- Checks if the specified component is a filter\n\t\tis_filter(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"FILTER\"\n\t\t\t\n\t\t-- Checks that a proof has been generated showing the filter regular expression\n\t\t-- matches the AGREE contract\n\t\tfilter_proof_checked() <=\n\t\t\t** \"Filter proof checked\" **\n\t\t\tanalysis(\"ToolCheck\", \"SPLAT\")\n\t\t\t\n\t\t-- Evidence that an attestation manager component exists for a given communication driver\n\t\tattestation_manager_exists(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"An attestation manager on \" comm_driver \" exists\" **\n\t\t\t-- check that the attestation manager only has attestation request/response connections to the comm driver\n\t\t\tlet am : component = instance(attestation_manager);\n\t\t\tlet cd : component = instance(comm_driver);\n\t\t\tlet attestation_conns : {connection} = {conn for (conn : connections(am))};\n\t\t\tis_comm_driver(cd) and is_attestation_manager(am) and\n\t\t\tforall (conn : attestation_conns). \n\t\t\t\t\t(has_type(conn) and name(type(conn)) = \"CASE_AttestationRequestMsg.Impl\") => destination_component(conn) = cd and\n\t\t\t\t\t(has_type(conn) and name(type(conn)) = \"CASE_AttestationResponseMsg.Impl\") => source_component(conn) = cd\n\t\t\t\n\t\t-- Evidence that communication from the comm driver cannot bypass attestation manager\n\t\tattestation_manager_not_bypassed(comm_driver : component, attestation_manager : component) <=\n\t\t\t** \"Attestation Manager cannot be bypassed\" **\n\t\t\t-- all outgoing connections from the comm driver to components inside the \n\t\t\t-- parent of the comm driver all lead to the attestation manager\n\t\t\tlet am : component = instance(attestation_manager);\n\t\t\tlet cd : component = instance(comm_driver);\n\t\t\tlet out_conns : {connection} = {conn for (conn : connections(cd)) | source_component(conn) = cd and not (destination_component(conn) = parent(cd))};\n\t\t\tforall(conn : out_conns). destination_component(conn) = am \n\t\t\t\n\t\t-- This should connect to some evidence that the attestation manager was correctly generated\n\t    -- and that the proof was emitted and checked.\n\t    -- However, this funcionality has not yet been implemented\n\t    attestation_manager_prop_checked() <=\n\t\t    ** \"Attestation Manager property implemented by CakeML\" **\n\t\t    forall (c : component). is_attestation_manager(c)\n\t\t       => has_property(c, CASE_Properties::COMP_IMPL) and property(c, CASE_Properties::COMP_IMPL) = \"CAKEML\"\n\t\t       and attestation_manager_proof_checked()\n\t\t       \n\t\t-- Checks that a proof has been generated showing the attestation manager has been implemented correctly\n\t\tattestation_manager_proof_checked() : bool =\n\t\ttrue\n--\t\t\tanalysis(\"ToolCheck\", \"SPLAT\")\n\t\t\t\n\t\t-- Checks if the specified component is an attestation manager\n\t\tis_attestation_manager(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"ATTESTATION\"\n\t\n\t\t-- Checks if the specified component is a communications driver\n\t\tis_comm_driver(c : component) : bool =\n\t\t\thas_property(c, CASE_Properties::COMP_TYPE) and property(c, CASE_Properties::COMP_TYPE) = \"COMM_DRIVER\"\n\t\n\t**}"
        }
      ]
    }
  },
  {
    "name": "UAS",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "GS",
        "UAV",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "RF",
          "kind": "ComponentType",
          "category": "bus",
          "properties": [
            {
              "name": "CASE_Properties::COMM_MODALITY",
              "value": "RF"
            }
          ]
        },
        {
          "name": "RF.Impl",
          "kind": "ComponentImplementation",
          "category": "bus"
        },
        {
          "name": "UAS",
          "kind": "ComponentType",
          "category": "system"
        },
        {
          "name": "UAS.Impl",
          "kind": "ComponentImplementation",
          "category": "system",
          "subcomponents": [
            {
              "name": "RFA",
              "category": "bus",
              "classifier": "UAS::RF.Impl"
            },
            {
              "name": "GND",
              "category": "system",
              "classifier": "GS::GroundStation.Impl"
            },
            {
              "name": "UAV",
              "category": "system",
              "classifier": "UAV::UAV.Impl"
            }
          ],
          "connections": [
            {
              "name": "bac1",
              "kind": "busAccess",
              "source": "RFA",
              "destination": "GND.RFA",
              "bidirectional": "true"
            },
            {
              "name": "bac2",
              "kind": "busAccess",
              "source": "RFA",
              "destination": "UAV.RFA",
              "bidirectional": "true"
            },
            {
              "name": "c1",
              "kind": "port",
              "source": "GND.radio_send",
              "destination": "UAV.radio_recv",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "UAV.radio_send",
              "destination": "GND.radio_recv",
              "bidirectional": "false"
            }
          ],
          "properties": [
            {
              "name": "Deployment_Properties::Actual_Connection_Binding",
              "value": [
                "RFA"
              ],
              "appliesTo": [
                "c1",
                "c2"
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "name": "GS",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "UAS",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "Radio",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "recv_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "recv_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "send_data_in",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data_out",
              "kind": "EventDataPort",
              "direction": "out"
            },
            {
              "name": "GSA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "GS::GS_Bus.Impl"
            },
            {
              "name": "RFA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAS::RF.Impl"
            }
          ]
        },
        {
          "name": "Radio.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "GS_Proc",
          "kind": "ComponentType",
          "category": "processor",
          "features": [
            {
              "name": "GSA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "GS::GS_Bus.Impl"
            }
          ]
        },
        {
          "name": "GS_Proc.Impl",
          "kind": "ComponentImplementation",
          "category": "processor"
        },
        {
          "name": "GS_Mem",
          "kind": "ComponentType",
          "category": "memory",
          "features": [
            {
              "name": "GSA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "GS::GS_Bus.Impl"
            }
          ]
        },
        {
          "name": "GS_Mem.Impl",
          "kind": "ComponentImplementation",
          "category": "memory"
        },
        {
          "name": "GS_Bus",
          "kind": "ComponentType",
          "category": "bus"
        },
        {
          "name": "GS_Bus.Impl",
          "kind": "ComponentImplementation",
          "category": "bus"
        },
        {
          "name": "GS_SW",
          "kind": "ComponentType",
          "category": "process",
          "features": [
            {
              "name": "recv_data",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "send_data",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "GS_SW.Impl",
          "kind": "ComponentImplementation",
          "category": "process"
        },
        {
          "name": "GroundStation",
          "kind": "ComponentType",
          "category": "system",
          "features": [
            {
              "name": "RFA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAS::RF.Impl"
            },
            {
              "name": "radio_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "radio_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::BOUNDARY",
              "value": [
                "PHYSICAL"
              ]
            }
          ]
        },
        {
          "name": "GroundStation.Impl",
          "kind": "ComponentImplementation",
          "category": "system",
          "subcomponents": [
            {
              "name": "BUS_HW",
              "category": "bus",
              "classifier": "GS::GS_Bus.Impl"
            },
            {
              "name": "RADIO_HW",
              "category": "device",
              "classifier": "GS::Radio.Impl"
            },
            {
              "name": "MEM_HW",
              "category": "memory",
              "classifier": "GS::GS_Mem.Impl"
            },
            {
              "name": "PROC_SW",
              "category": "process",
              "classifier": "GS::GS_SW.Impl"
            },
            {
              "name": "PROC_HW",
              "category": "processor",
              "classifier": "GS::GS_Proc.Impl"
            }
          ],
          "connections": [
            {
              "name": "bac1",
              "kind": "busAccess",
              "source": "RADIO_HW.GSA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac3",
              "kind": "busAccess",
              "source": "PROC_HW.GSA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac4",
              "kind": "busAccess",
              "source": "MEM_HW.GSA",
              "destination": "BUS_HW",
              "bidirectional": "true"
            },
            {
              "name": "bac6",
              "kind": "busAccess",
              "source": "RADIO_HW.RFA",
              "destination": "RFA",
              "bidirectional": "true"
            },
            {
              "name": "c1",
              "kind": "port",
              "source": "PROC_SW.send_data",
              "destination": "RADIO_HW.send_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c2",
              "kind": "port",
              "source": "RADIO_HW.send_data_out",
              "destination": "radio_send",
              "bidirectional": "false"
            },
            {
              "name": "c3",
              "kind": "port",
              "source": "radio_recv",
              "destination": "RADIO_HW.recv_data_in",
              "bidirectional": "false"
            },
            {
              "name": "c4",
              "kind": "port",
              "source": "RADIO_HW.recv_data_out",
              "destination": "PROC_SW.recv_data",
              "bidirectional": "false"
            }
          ],
          "properties": [
            {
              "name": "Deployment_Properties::Actual_Processor_Binding",
              "value": [
                "PROC_HW"
              ],
              "appliesTo": [
                "PROC_SW"
              ]
            },
            {
              "name": "Deployment_Properties::Actual_Memory_Binding",
              "value": [
                "MEM_HW"
              ],
              "appliesTo": [
                "PROC_SW"
              ]
            },
            {
              "name": "Deployment_Properties::Actual_Connection_Binding",
              "value": [
                "BUS_HW"
              ],
              "appliesTo": [
                "c1",
                "c4"
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "name": "FC",
    "kind": "AadlPackage",
    "public": {
      "with": [
        "UAV",
        "CASE_Properties"
      ],
      "components": [
        {
          "name": "GPS_Receiver",
          "kind": "ComponentType",
          "category": "device",
          "features": [
            {
              "name": "position",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ]
        },
        {
          "name": "GPS_Receiver.Impl",
          "kind": "ComponentImplementation",
          "category": "device"
        },
        {
          "name": "FlightController",
          "kind": "ComponentType",
          "category": "system",
          "features": [
            {
              "name": "UARTA",
              "kind": "BusAccess",
              "accessType": "requires",
              "bus": "UAV::Serial.Impl"
            },
            {
              "name": "uart_recv",
              "kind": "EventDataPort",
              "direction": "in"
            },
            {
              "name": "uart_send",
              "kind": "EventDataPort",
              "direction": "out"
            }
          ],
          "properties": [
            {
              "name": "CASE_Properties::CONFIDENTIALITY",
              "value": "MEDIUM"
            },
            {
              "name": "CASE_Properties::INTEGRITY",
              "value": "MEDIUM"
            },
            {
              "name": "CASE_Properties::AVAILABILITY",
              "value": "HIGH"
            },
            {
              "name": "CASE_Properties::BOUNDARY",
              "value": [
                "PHYSICAL",
                "TRUSTED"
              ]
            }
          ]
        },
        {
          "name": "FlightController.Impl",
          "kind": "ComponentImplementation",
          "category": "system",
          "subcomponents": [
            {
              "name": "GPS",
              "category": "device",
              "classifier": "FC::GPS_Receiver.Impl"
            }
          ],
          "connections": [
            {
              "name": "c1",
              "kind": "port",
              "source": "GPS.position",
              "destination": "uart_send",
              "bidirectional": "false"
            }
          ]
        }
      ]
    }
  }
]