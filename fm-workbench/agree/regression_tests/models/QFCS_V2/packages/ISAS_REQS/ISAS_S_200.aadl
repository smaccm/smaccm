package ISAS_S_200
public
   with Base_Types;

-- In the case of a single channel of a dual input signal being declared faulty, 
-- ISAS shall determine the selected value by averaging the remaining channel 
-- with the equivalent selected value of EGI data.

annex agree {**
	
	node req(aoa : DATA_TYPES::DUAL_AoA.treal,
             air_data : DATA_TYPES::DUAL_AirData.treal, 
             
             aoa_faults : DATA_TYPES::DUAL_AoA.tbool,
             air_data_faults : DATA_TYPES::DUAL_AirData.tbool, 
             
             egi_select : Data_Types::EGI.treal,          
                         
             aoa_select : DATA_TYPES::AoA.treal,
             air_data_select : DATA_TYPES::AirData.treal
              
	        ) returns (ret : bool);
	  let
    	ret = (    aoa_faults.AOA1.AOA         and not aoa_faults.AOA2.AOA         => aoa_select.AOA          = (aoa.AOA2.AOA         + egi_select.AOA    ) / 2.0) 
	      and (not aoa_faults.AOA1.AOA         and     aoa_faults.AOA2.AOA         => aoa_select.AOA          = (aoa.AOA1.AOA         + egi_select.AOA    ) / 2.0)
	      and (    air_data_faults.AD1.TAT     and not air_data_faults.AD2.TAT     => air_data_select.TAT     = (air_data.AD2.TAT     + egi_select.TAT    ) / 2.0)
	      and (not air_data_faults.AD1.TAT     and     air_data_faults.AD2.TAT     => air_data_select.TAT     = (air_data.AD1.TAT     + egi_select.TAT    ) / 2.0) 
	      and (    air_data_faults.AD1.TotPres and not air_data_faults.AD2.TotPres => air_data_select.TotPres = (air_data.AD2.TotPres + egi_select.TotPres) / 2.0)
	      and (not air_data_faults.AD1.TotPres and     air_data_faults.AD2.TotPres => air_data_select.TotPres = (air_data.AD1.TotPres + egi_select.TotPres) / 2.0)   
	      and (    air_data_faults.AD1.Pres    and not air_data_faults.AD2.Pres    => air_data_select.Pres    = (air_data.AD2.Pres    + egi_select.Pres   ) / 2.0)
	      and (not air_data_faults.AD1.Pres    and     air_data_faults.AD2.Pres    => air_data_select.Pres    = (air_data.AD1.Pres    + egi_select.Pres   ) / 2.0)   
	      and (    air_data_faults.AD1.Temp    and not air_data_faults.AD2.Temp    => air_data_select.Temp    = (air_data.AD2.Temp    + egi_select.Temp   ) / 2.0)
          and (not air_data_faults.AD1.Temp    and     air_data_faults.AD2.Temp    => air_data_select.Temp    = (air_data.AD1.Temp    + egi_select.Temp   ) / 2.0);            
	  tel;
    	  
**};

end ISAS_S_200;