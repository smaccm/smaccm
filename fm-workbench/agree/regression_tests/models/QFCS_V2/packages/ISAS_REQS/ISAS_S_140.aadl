package ISAS_S_140
public

--ISAS shall compare dual channel inputs to determine
--if the signals match within a tolerance.

annex agree {**
	
	node req(aoa : DATA_TYPES::DUAL_AoA.treal,
             air_data : DATA_TYPES::DUAL_AirData.treal, 
             
             aoa_failed_update : DATA_TYPES.dual_bool,
             air_failed_update : DATA_TYPES.dual_bool, 
             
             aoa_in_range : DATA_TYPES::DUAL_AoA.tbool,
             air_data_in_range : DATA_TYPES::DUAL_AirData.tbool,
             
             aoa_within_tol: Data_Types::DUAL_AoA.tbool,  
             air_data_within_tol: Data_Types::DUAL_AirData.tbool
              
	        ) returns (ret : bool);
	  let
	    ret = 
		    (((not aoa_failed_update.val1 and aoa_in_range.AOA1.AOA) and (not aoa_failed_update.val2 and aoa_in_range.AOA2.AOA)) =>
		        (aoa_within_tol.AOA1.AOA = matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, AGREE_CONSTANTS.AOA_tol)) and
		        (aoa_within_tol.AOA2.AOA = matches_tolerance_real(aoa.AOA2.AOA, aoa.AOA1.AOA, AGREE_CONSTANTS.AOA_tol)))
	    and  
		    (((not air_failed_update.val1 and air_data_in_range.AD1.TAT) and (not air_failed_update.val2 and air_data_in_range.AD2.TAT)) =>
		        (air_data_within_tol.AD1.TAT = matches_tolerance_real(air_data.AD1.TAT, air_data.AD2.TAT, AGREE_CONSTANTS.TAT_tol)) and 
		        (air_data_within_tol.AD2.TAT = matches_tolerance_real(air_data.AD2.TAT, air_data.AD1.TAT, AGREE_CONSTANTS.TAT_tol)))
	    and  
		    (((not air_failed_update.val1 and air_data_in_range.AD1.TotPres) and (not air_failed_update.val2 and air_data_in_range.AD2.TotPres)) =>
		        (air_data_within_tol.AD1.TotPres = matches_tolerance_real(air_data.AD1.TotPres, air_data.AD2.TotPres, AGREE_CONSTANTS.TotPres_tol)) and 
		        (air_data_within_tol.AD2.TotPres = matches_tolerance_real(air_data.AD2.TotPres, air_data.AD1.TotPres, AGREE_CONSTANTS.TotPres_tol)))
        and  
		    (((not air_failed_update.val1 and air_data_in_range.AD1.Pres) and (not air_failed_update.val2 and air_data_in_range.AD2.Pres)) =>
		        (air_data_within_tol.AD1.Pres = matches_tolerance_real(air_data.AD1.Pres, air_data.AD2.Pres, AGREE_CONSTANTS.Pres_tol)) and 
		        (air_data_within_tol.AD2.Pres = matches_tolerance_real(air_data.AD2.Pres, air_data.AD1.Pres, AGREE_CONSTANTS.Pres_tol)))
        and  
		    (((not air_failed_update.val1 and air_data_in_range.AD1.Temp) and (not air_failed_update.val2 and air_data_in_range.AD2.Temp)) =>
		        (air_data_within_tol.AD1.Temp = matches_tolerance_real(air_data.AD1.Temp, air_data.AD2.Temp, AGREE_CONSTANTS.Temp_tol)) and 
		        (air_data_within_tol.AD2.Temp = matches_tolerance_real(air_data.AD2.Temp, air_data.AD1.Temp, AGREE_CONSTANTS.Temp_tol)));
	  tel;

  -- TBD: should this be a general purpose node?
  --returns true if two reals match within a specified tolerance
  node matches_tolerance_real(val1 : real, val2 : real, tol : real) returns (return : bool);
    let
      return = if(val1 <= val2) then
                 val2 <= val1 + tol
               else
                 val1 <= val2 + tol;
    tel;
    	  
**};

end ISAS_S_140;