package ISAS_S_220
public

-- In the case of mismatched dual input signals, ISAS shall set the 
-- selected value equal to the equivalent selected value of EGI data.

annex agree {**
	
	node req(aoa : DATA_TYPES::DUAL_AoA.treal,
             air_data : DATA_TYPES::DUAL_AirData.treal, 
             
             aoa_failed_update : DATA_TYPES.dual_bool,
             air_data_failed_update : DATA_TYPES.dual_bool, 
             
             aoa_in_range : DATA_TYPES::DUAL_AoA.tbool,
             air_data_in_range : DATA_TYPES::DUAL_AirData.tbool,
                          
             egi_select : Data_Types::EGI.treal,  
             egi_select_fault : Data_Types::EGI.tbool,        
             
             aoa_select : DATA_TYPES::AoA.treal,
             air_data_select : DATA_TYPES::AirData.treal
              
	        ) returns (ret : bool);
	  let
	      ret = 
		    (((not aoa_failed_update.val1 and aoa_in_range.AOA1.AOA) and (not aoa_failed_update.val2 and aoa_in_range.AOA2.AOA) and
		       not matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, AGREE_CONSTANTS.AOA_tol) and not egi_select_fault.AOA) =>
		        aoa_select.AOA = egi_select.AOA)      
		 and 
		   (((not air_data_failed_update.val1 and air_data_in_range.AD1.TAT) and (not air_data_failed_update.val2 and air_data_in_range.AD2.TAT) and
		       not matches_tolerance_real(air_data.AD1.TAT, air_data.AD2.TAT, AGREE_CONSTANTS.TAT_tol) and not egi_select_fault.TAT) =>
		        air_data_select.TAT = egi_select.TAT)
		 and 
		   (((not air_data_failed_update.val1 and air_data_in_range.AD1.TotPres) and (not air_data_failed_update.val2 and air_data_in_range.AD2.TotPres) and
		       not matches_tolerance_real(air_data.AD1.TotPres, air_data.AD2.TotPres, AGREE_CONSTANTS.TotPres_tol) and not egi_select_fault.TotPres) =>
		        air_data_select.TotPres = egi_select.TotPres)
		 and 
		   (((not air_data_failed_update.val1 and air_data_in_range.AD1.Pres) and (not air_data_failed_update.val2 and air_data_in_range.AD2.Pres) and
		       not matches_tolerance_real(air_data.AD1.Pres, air_data.AD2.Pres, AGREE_CONSTANTS.Pres_tol) and not egi_select_fault.Pres) =>
		        air_data_select.Pres = egi_select.Pres)
		 and
		   (((not air_data_failed_update.val1 and air_data_in_range.AD1.Temp) and (not air_data_failed_update.val2 and air_data_in_range.AD2.Temp) and
		       not matches_tolerance_real(air_data.AD1.Temp, air_data.AD2.Temp, AGREE_CONSTANTS.Temp_tol) and not egi_select_fault.Temp) =>
		        air_data_select.Temp = egi_select.Temp);
	 tel;
	 
  -- TBD: should this be a general purpose node?
  --returns true if two reals match within a specified tolerance
  node matches_tolerance_real(val1 : real, val2 : real, tol : real) returns (return : bool);
    let
      return = if(val1 <= val2) then
                 val2 <= val1 + tol
               else
                 val1 <= val2 + tol;
    tel;
    	  
**};

end ISAS_S_220;