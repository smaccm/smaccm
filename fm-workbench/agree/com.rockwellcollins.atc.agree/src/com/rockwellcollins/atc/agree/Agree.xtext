grammar com.rockwellcollins.atc.agree.Agree with org.osate.xtext.aadl2.properties.Properties

generate agree "http://www.rockwellcollins.com/atc/agree/Agree"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NamedElement returns aadl2::NamedElement:
	Arg
	| NamedSpecStatement
	| FnDef
	| PropertyStatement
	| ConstStatement
	| EnumStatement
	| NodeDef
	| LinearizationDef
	| LibraryFnDef
	| RecordDef
	| => NamedID
	| => ArraySubBinding
	| => Acc
	;

Element returns aadl2::Element:
	Expr
	| LinearizationInterval
	| Type
	| AgreeContract
	| SpecStatement
	| NodeStmt
	| NodeBodyExpr
	| EqStatement
	| InputStatement;

AnnexLibrary returns aadl2::AnnexLibrary:
	AgreeLibrary;

AnnexSubclause returns aadl2::AnnexSubclause:
	AgreeSubclause;

AgreeLibrary:
	{AgreeContractLibrary} contract=AgreeContract;

AgreeSubclause:
	{AgreeContractSubclause} contract=AgreeContract;

AgreeContract returns Contract:
	{AgreeContract} (specs+=SpecStatement)*;
	
SpecStatement:
	NamedSpecStatement
|	{InitialStatement} 'initially' ':' expr=Expr  ';'
|	{ParamStatement} 'parameter' expr=Expr ':' type=Type ';'
|	{LiftStatement} 'lift' subcomp=[aadl2::NamedElement] ';'
|	{ConnectionStatement} 'connection' conn=[aadl2::NamedElement] ':' expr=Expr ';'
|	SynchStatement
|	OrderStatement
|	PropertyStatement
|	ConstStatement
|	EnumStatement
|	EqStatement
|	AssignStatement
|	LinearizationDef
|	FnDef
|	LibraryFnDef
|	NodeDef
|	RecordDef
|	InputStatement;
	
NamedSpecStatement:
	{AssumeStatement} 'assume' (name=ID)? str=STRING ':' (expr=Expr | pattern=PatternStatement) ';'
	| {GuaranteeStatement} 'guarantee' (name=ID)? str=STRING ':' (expr=Expr | pattern=PatternStatement) ';'
	| {AssertStatement} 'assert' ((name=ID)? str=STRING ':')? (expr=Expr | pattern=PatternStatement) ';'
	| {LemmaStatement} 'lemma' (name=ID)?  str=STRING ':' (expr=Expr | pattern=PatternStatement) ';'
	;

	
//The following are patterns from the CESAR RSL
PatternStatement returns PatternStatement:
	WheneverStatement
|	{AlwaysStatement} 'always' expr=Expr ';'
|   WhenStatement
|   RealTimeStatement
;

WhenStatement:
	=> ({WhenHoldsStatement} 'when' condition=Expr 'holds') 'during' 
        conditionInterval=TimeInterval event=Expr (excl='exclusively')? 'occurs' ('during' eventInterval=TimeInterval)? 
|   => ({WhenOccursStatment} 'when' condition=Expr 'occurs')
        times=Expr 'times' 'during' interval=TimeInterval (excl='exclusively')? 'raises' event=Expr 
;

WheneverStatement:
	=> ({WheneverOccursStatement} 'whenever' cause=Expr 'occurs'
	    effect=Expr (excl='exclusively')? ('occur' | 'occurs')) ('during' interval=TimeInterval)? 
|   => ({WheneverBecomesTrueStatement} 'whenever' cause=Expr 'becomes' 'true'
	    effect=Expr (excl='exclusively')? ('occur' | 'occurs')) ('during' interval=TimeInterval)? 
|	=> ({WheneverHoldsStatement} 'whenever' cause=Expr 'occurs'
	    effect=Expr (excl='exclusively')? ('holds')) ('during' interval=TimeInterval)? 
|   => ({WheneverImpliesStatement} 'whenever' cause=Expr 'occurs'
	    lhs=Expr 'implies') rhs=Expr (excl='exclusively')? ('during' interval=TimeInterval)? 	    
;

RealTimeStatement:
	=> ({PeriodicStatement} 'condition' event=Expr 'occurs' 'each') period=Expr ('with' 'jitter' jitter=Expr)? 
|	=> ({SporadicStatement} 'condition' event=Expr 'occurs' 'sporadic') 'with' 'IAT' iat=Expr ('with' 'jitter' jitter=Expr)?
;
 
TimeInterval returns TimeInterval:
	=>({ClosedTimeInterval} '[' low=Expr ',' high=Expr ']')
|   =>({OpenLeftTimeInterval} '(' low=Expr ',' high=Expr']')
|   =>({OpenRightTimeInterval} '[' low=Expr ',' high=Expr ')')
|   =>({OpenTimeInterval} '(' low=Expr ',' high=Expr ')') 
;

SynchStatement:
	{SynchStatement} 'synchrony' ':' val = INTEGER_LIT (',' val2=INTEGER_LIT)? (sim=('simult'|'no_simult'))? ';'
|	{MNSynchStatement} 'synchrony' ':' (comp1+=[aadl2::NamedElement] ',' comp2+=[aadl2::NamedElement] ':' max+=INTEGER_LIT ',' min+=INTEGER_LIT)+ ';'
|   {CalenStatement} 'calendar' ':' els+=([aadl2::NamedElement]) ("," els+=[aadl2::NamedElement])*  ';'
|   {AsynchStatement} 'synchrony' ':' 'asynchronous' ';'
|   {LatchedStatement} 'synchrony' ':' 'latched' ';'
;

OrderStatement:
	'ordering' ':' comps += [aadl2::NamedElement] ("," comps+=[aadl2::NamedElement])* ';'
;

NamedAbstraction returns aadl2::NamedElement:
	Abstraction;

Abstraction returns Abstraction:
	LinearizationDef
	| LibraryFnDef
	| FnDef
	| NodeDef;

PropertyStatement:
	'property' name=ID '=' expr=Expr ';';

ConstStatement:
	'const' name=ID ':' type=Type '=' expr=Expr ';'; //this should really be an "Arg"

EqStatement:
	'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';';
	
InputStatement:
	'agree_input' (lhs+=Arg (',' lhs+=Arg)*) ';';

AssignStatement:
	'assign' id=[aadl2::NamedElement|QCPREF] '=' expr=Expr ';';

FnDef:
	'fun' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type '=' expr=Expr ';';
	
LibraryFnDef:
	'external' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type ';';

LinearizationDef:
	'linearization' name=ID '(' args+=Arg (',' args+=Arg)* ')'
	'over' '[' intervals+=LinearizationInterval (',' intervals+=LinearizationInterval)* ']'
	('within' precision=Expr)? ':' exprBody=Expr ';'
	;

LinearizationInterval:
	start=Expr '..' end=Expr;

NodeDef:
	'node' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' 'returns'
	'(' (rets+=Arg (',' rets+=Arg)*)? ')' ';'
	nodeBody=NodeBodyExpr;

NodeBodyExpr:
	('var' (locs+=Arg ';')+)?
	'let'
	(stmts+=NodeStmt)+
	'tel' ';';

NodeStmt:
	{NodeEq} lhs+=[Arg] (',' lhs+=[Arg])* '=' expr=Expr ';'
	| {NodeLemma} 'lemma' str=STRING ':' expr=Expr ';';

Arg returns Arg:
	=> (name=ID ':' type=Type);
	
Type returns Type:
	BaseType (=> ({ArrayType.stem = current} '[' size=INTEGER_LIT ']'))*
;


BaseType returns Type:
	{PrimType} name=primTypes ('[' (lowNeg='-')? rangeLow=(INTEGER_LIT|REAL_LIT) ',' (highNeg='-')? rangeHigh=(INTEGER_LIT|REAL_LIT) ']')?
|	DoubleDotRef
;

primTypes:
  'real' | 'bool' | 'int';
  

RecordDef:
	'type' name=ID '=' 'struct' '{' (args+=Arg (',' args+=Arg)*) '}' ';'
;

	
EnumStatement:
	'enum' name=ID '=' '{' enums+=NamedID (',' enums+=NamedID)* '}' ';';


Expr returns Expr:
	ForallExpr;
	
ForallExpr returns Expr:
    {ForallExpr} 'forall' binding=ArraySubBinding 'in' array=Expr ',' expr=Expr
    | ExistsExpr;

ExistsExpr returns Expr:
    {ExistsExpr} 'exists' binding=ArraySubBinding  'in' array=Expr ',' expr=Expr
    | ForeachExpr;
    
ForeachExpr returns Expr:
    {ForeachExpr} 'foreach' binding=ArraySubBinding  'in' array=Expr ',' expr=Expr
    | FoldLeftExpr;

FoldLeftExpr returns Expr:
    {FoldLeftExpr} 'foldl' binding=ArraySubBinding  'in' array=Expr 'into' accumulator=Acc '=' initial=Expr ',' expr=Expr
    | FoldRightExpr;

FoldRightExpr returns Expr:
    {FoldRightExpr} 'foldr' binding=ArraySubBinding  'in' array=Expr 'into' accumulator=Acc '=' initial=Expr ',' expr=Expr
    | ArrowExpr;

ArrowExpr returns Expr:
	ImpliesExpr (=> ({BinaryExpr.left=current} op='->') right=ArrowExpr)?;

ImpliesExpr returns Expr:
	EquivExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;

EquivExpr returns Expr:
	OrExpr (=> ({BinaryExpr.left=current} op='<=>') right=OrExpr)?;

OrExpr returns Expr:
	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*;

AndExpr returns Expr:
	RelateExpr (=> ({BinaryExpr.left=current} op='and') right=RelateExpr)*;

RelateOp:
	'<' | '<=' | '>' | '>=' | '=' | '<>' | '!='; //todo remove `<>'

RelateExpr returns Expr:
	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;

AddSubExpr returns Expr:
	MultDivExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultDivExpr)*;

MultDivExpr returns Expr:
	PowerExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | 'div' | 'mod')) right=PowerExpr)*;//todo remove div

PowerExpr returns Expr:
	UnaryExpr (=> ({BinaryExpr.left=current} op=('^')) right=UnaryExpr)*;

UnaryExpr returns Expr:
	{UnaryExpr} op=('-' | 'not') expr=UnaryExpr
	| IfThenElseExpr;

IfThenElseExpr returns Expr:
	{IfThenElseExpr} 'if' a=Expr 'then' b=Expr 'else' c=Expr
	| PreDefFnExpr;
	
	  
ComponentRef:
	{ThisRef} 'this' |
	DoubleDotRef
;

PreDefFnExpr returns Expr:
	{PrevExpr} 'prev' '(' delay=Expr ',' init=Expr ')'
	| {GetPropertyExpr} 'Get_Property' '(' componentRef=ComponentRef ',' prop=[aadl2::NamedElement|QCLREF] ')'
	| ArrayUpdateExpr;


ArrayUpdateExpr returns Expr:
        RecordUpdateExpr (=> ({ArrayUpdateExpr.array=current}
                              '[|' indices+=Expr ':=' ) valueExprs+=Expr
                              (';' indices+=Expr ':=' valueExprs+=Expr)* '|]')?;

RecordUpdateExpr returns Expr:
	ArraySubExpr (=> ({RecordUpdateExpr.record=current} '{' key=[aadl2::NamedElement|ID] ':=' expr=Expr '}'))*
;

ArraySubExpr returns Expr:
  TagExpr (=>({ArraySubExpr.expr=current} '[' index=Expr ']'))*;
  
TagExpr returns Expr:
	ProjectionExpr ({TagExpr.stem=current} '.' tag=ReservedVarTag)?
;
  
ProjectionExpr returns Expr:
  TermExpr (=>({ProjectionExpr.expr=current} '.' field=[aadl2::NamedElement|ID]))*;
  
TermExpr returns Expr:
	=> ({NamedElmExpr} elm=[aadl2::NamedElement|DCID])
	| {TimeExpr} 'time'
	| {IndicesExpr} 'indices' '(' array=Expr ')'
	| => ({CallExpr} ref=DoubleDotRef '(') (args+=Expr (',' args+=Expr)*)? ')' 
	| => ({RecordLitExpr} recordType=DoubleDotRef '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=Expr)* '}'
	| => ({EnumLitExpr} 'enum' '(') enumType=DoubleDotRef ',' value=ID ')'
	| ArrayLiteralExpr
	| {IntLitExpr} val=INTEGER_LIT
	| {PreExpr} 'pre' '(' expr=Expr ')'
	| {EventExpr} 'event' '(' id = Expr ')'
	| {LatchedExpr} 'latched' '(' expr = Expr ')'
	| {TimeOfExpr} 'timeof' '(' id = [aadl2::NamedElement] ')'
	| {TimeRiseExpr} 'timerise' '(' id = [aadl2::NamedElement] ')'
	| {TimeFallExpr} 'timefall' '(' id = [aadl2::NamedElement] ')'
	| {RealLitExpr} val=REAL_LIT
	| {BoolLitExpr} val=BooleanLiteral
	| {FloorCast} 'floor' '(' expr=Expr ')'
	| {RealCast}  'real' '(' expr=Expr ')'
	| '(' Expr ')';

	

ArrayLiteralExpr:
	=>('[|' elems+=Expr '|]') |
	=>('[|' elems+=Expr ',') (elems+=Expr) (',' elems+=Expr)* '|]'
;




//ComplexExpr:
//	(DoubleDotRef => ( {RecordExpr.record=current} '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=Expr)* '}') 
//|	NestedDotID
//	(=> ({FnCallExpr.fn=current} '(') (args+=Expr (',' args+=Expr)*)? ')')?
//;


DoubleDotRef:
	elm=[aadl2::NamedElement|QCPREF]
;


	
QCPREF:
	(ID '::')? ID ('.' ID)?
 ;
 

 
 DCID:
	(ID '::')* ID
 ;
 
	
ReservedVarTag:
	'_REMOVE'
|	'_INSERT'
|	'_COUNT'
|   '_CLK';


NamedID:
	name=ID
;

ArraySubBinding:
	name=ID
;

Acc:
name=ID
;

JavaQualifiedName:
	ID ('.' ID)*;
