/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.resolute.formatting2;

import com.google.inject.Inject
import com.rockwellcollins.atc.resolute.resolute.Arg
import com.rockwellcollins.atc.resolute.resolute.BaseType
import com.rockwellcollins.atc.resolute.resolute.BinaryExpr
import com.rockwellcollins.atc.resolute.resolute.BoolExpr
import com.rockwellcollins.atc.resolute.resolute.BuiltInFnCallExpr
import com.rockwellcollins.atc.resolute.resolute.CastExpr
import com.rockwellcollins.atc.resolute.resolute.ClaimBody
import com.rockwellcollins.atc.resolute.resolute.ClaimText
import com.rockwellcollins.atc.resolute.resolute.ConstantDefinition
import com.rockwellcollins.atc.resolute.resolute.Definition
import com.rockwellcollins.atc.resolute.resolute.Expr
import com.rockwellcollins.atc.resolute.resolute.FailExpr
import com.rockwellcollins.atc.resolute.resolute.FnCallExpr
import com.rockwellcollins.atc.resolute.resolute.FunctionBody
import com.rockwellcollins.atc.resolute.resolute.FunctionDefinition
import com.rockwellcollins.atc.resolute.resolute.IfThenElseExpr
import com.rockwellcollins.atc.resolute.resolute.InstanceOfExpr
import com.rockwellcollins.atc.resolute.resolute.IntExpr
import com.rockwellcollins.atc.resolute.resolute.LetBinding
import com.rockwellcollins.atc.resolute.resolute.LetExpr
import com.rockwellcollins.atc.resolute.resolute.ListExpr
import com.rockwellcollins.atc.resolute.resolute.ListFilterMapExpr
import com.rockwellcollins.atc.resolute.resolute.ListType
import com.rockwellcollins.atc.resolute.resolute.NestedDotID
import com.rockwellcollins.atc.resolute.resolute.ProveStatement
import com.rockwellcollins.atc.resolute.resolute.QuantArg
import com.rockwellcollins.atc.resolute.resolute.QuantifiedExpr
import com.rockwellcollins.atc.resolute.resolute.RealExpr
import com.rockwellcollins.atc.resolute.resolute.ResoluteLibrary
import com.rockwellcollins.atc.resolute.resolute.ResoluteSubclause
import com.rockwellcollins.atc.resolute.resolute.SetExpr
import com.rockwellcollins.atc.resolute.resolute.SetFilterMapExpr
import com.rockwellcollins.atc.resolute.resolute.SetType
import com.rockwellcollins.atc.resolute.resolute.StringExpr
import com.rockwellcollins.atc.resolute.resolute.ThisExpr
import com.rockwellcollins.atc.resolute.resolute.UnaryExpr
import com.rockwellcollins.atc.resolute.services.ResoluteGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.osate.xtext.aadl2.properties.formatting2.PropertiesFormatter

class ResoluteFormatter extends PropertiesFormatter {
	
	@Inject extension ResoluteGrammarAccess

	def dispatch void format(ResoluteLibrary resolutelibrary, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		var i = 0;
		for (Definition definitions : resolutelibrary.getDefinitions()) {
			if(i != 0) {
				definitions.prepend[newLines = 2]
			}
			format(definitions, document);
			i = i + 1;
		}
	}

	def dispatch void format(ListType listtype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(listtype.getType(), document);
	}

	def dispatch void format(SetType settype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(settype.getType(), document);
	}

	def dispatch void format(BaseType basetype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(basetype.getParamType(), document);
	}

	def dispatch void format(Arg arg, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(arg.getType(), document);
	}

	def dispatch void format(QuantArg quantarg, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(quantarg.getExpr(), document);
	}

	def dispatch void format(ConstantDefinition constantdefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(constantdefinition.getType(), document);
		format(constantdefinition.getExpr(), document);
	}

	def dispatch void format(FunctionDefinition functiondefinition, extension IFormattableDocument document) {
		functiondefinition.regionFor.keyword("(").prepend[noSpace].append[oneSpace];
		functiondefinition.regionFor.keyword(")").surround[oneSpace];
		functiondefinition.regionFor.keyword(",").prepend[noSpace];
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Arg args : functiondefinition.getArgs()) {
			format(args, document);
		}
		format(functiondefinition.getBody(), document);
	}

	def dispatch void format(FunctionBody functionbody, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionbody.getType(), document);
		format(functionbody.getExpr(), document);
	}

	def dispatch void format(ClaimBody claimbody, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		claimbody.regionFor.keyword("<=").append[newLines = 1]
		for (ClaimText claim : claimbody.getClaim()) {
			format(claim, document);
		}
		
		claimbody.getExpr().prepend[newLines = 1]
		format(claimbody.getExpr(), document);
	}

	def dispatch void format(BinaryExpr binaryexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(binaryexpr.getRight(), document);
		format(binaryexpr.getLeft(), document);
	}

	def dispatch void format(InstanceOfExpr instanceofexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(instanceofexpr.getType(), document);
		format(instanceofexpr.getExpr(), document);
	}

	def dispatch void format(UnaryExpr unaryexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryexpr.getExpr(), document);
	}

	def dispatch void format(CastExpr castexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(castexpr.getType(), document);
		format(castexpr.getExpr(), document);
	}

	def dispatch void format(ThisExpr thisexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(thisexpr.getSub(), document);
	}

	def dispatch void format(FailExpr failexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(failexpr.getVal(), document);
		for (ClaimText failmsg : failexpr.getFailmsg()) {
			format(failmsg, document);
		}
	}

	def dispatch void format(IntExpr intexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(intexpr.getVal(), document);
	}

	def dispatch void format(RealExpr realexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(realexpr.getVal(), document);
	}

	def dispatch void format(BoolExpr boolexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(boolexpr.getVal(), document);
	}

	def dispatch void format(StringExpr stringexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(stringexpr.getVal(), document);
	}

	def dispatch void format(IfThenElseExpr ifthenelseexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifthenelseexpr.getCond(), document);
		format(ifthenelseexpr.getThen(), document);
		format(ifthenelseexpr.getElse(), document);
	}

	def dispatch void format(QuantifiedExpr quantifiedexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Arg args : quantifiedexpr.getArgs()) {
			format(args, document);
		}
		format(quantifiedexpr.getExpr(), document);
	}

	def dispatch void format(BuiltInFnCallExpr builtinfncallexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expr args : builtinfncallexpr.getArgs()) {
			format(args, document);
		}
	}

	def dispatch void format(FnCallExpr fncallexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expr args : fncallexpr.getArgs()) {
			format(args, document);
		}
	}

	def dispatch void format(ListFilterMapExpr listfiltermapexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Arg args : listfiltermapexpr.getArgs()) {
			format(args, document);
		}
		format(listfiltermapexpr.getFilter(), document);
		format(listfiltermapexpr.getMap(), document);
	}

	def dispatch void format(ListExpr listexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expr exprs : listexpr.getExprs()) {
			format(exprs, document);
		}
	}

	def dispatch void format(SetFilterMapExpr setfiltermapexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Arg args : setfiltermapexpr.getArgs()) {
			format(args, document);
		}
		format(setfiltermapexpr.getFilter(), document);
		format(setfiltermapexpr.getMap(), document);
	}

	def dispatch void format(SetExpr setexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expr exprs : setexpr.getExprs()) {
			format(exprs, document);
		}
	}

	def dispatch void format(LetExpr letexpr, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(letexpr.getBinding(), document);
		format(letexpr.getExpr(), document);
	}

	def dispatch void format(LetBinding letbinding, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(letbinding.getType(), document);
		format(letbinding.getExpr(), document);
	}

	def dispatch void format(ResoluteSubclause resolutesubclause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ProveStatement proves : resolutesubclause.getProves()) {
			proves.surround[newLines=1]
			format(proves, document);
		}
	}

	def dispatch void format(NestedDotID nesteddotid, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(nesteddotid.getSub(), document);
	}

	def dispatch void format(ProveStatement provestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(provestatement.getExpr(), document);
	}
}
