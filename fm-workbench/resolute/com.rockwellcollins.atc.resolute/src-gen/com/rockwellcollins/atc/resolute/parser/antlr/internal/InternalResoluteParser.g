/*
 * generated by Xtext
 */
parser grammar InternalResoluteParser;

options {
	tokenVocab=InternalResoluteLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.rockwellcollins.atc.resolute.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rockwellcollins.atc.resolute.services.ResoluteGrammarAccess;

}

@members {


	private ResoluteGrammarAccess grammarAccess;
	 	
	public InternalResoluteParser(TokenStream input, ResoluteGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "AnnexLibrary";	
	} 
	   	   	
	@Override
	protected ResoluteGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnexLibraryRule()); }
	 iv_ruleAnnexLibrary=ruleAnnexLibrary 
	 { $current=$iv_ruleAnnexLibrary.current; } 
	 EOF 
;

// Rule AnnexLibrary
ruleAnnexLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAnnexLibraryAccess().getResoluteLibraryParserRuleCall()); 
    }
    this_ResoluteLibrary_0=ruleResoluteLibrary
    {
        $current = $this_ResoluteLibrary_0.current;
        afterParserOrEnumRuleCall();
    }

;













// Entry rule entryRuleResoluteLibrary
entryRuleResoluteLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResoluteLibraryRule()); }
	 iv_ruleResoluteLibrary=ruleResoluteLibrary 
	 { $current=$iv_ruleResoluteLibrary.current; } 
	 EOF 
;

// Rule ResoluteLibrary
ruleResoluteLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResoluteLibraryAccess().getResoluteLibraryAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResoluteLibraryAccess().getDefinitionsDefinitionParserRuleCall_1_0()); 
	    }
		lv_definitions_1_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResoluteLibraryRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_1_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getConstantDefinitionParserRuleCall_0()); 
    }
    this_ConstantDefinition_0=ruleConstantDefinition
    {
        $current = $this_ConstantDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getFunctionDefinitionParserRuleCall_1()); 
    }
    this_FunctionDefinition_1=ruleFunctionDefinition
    {
        $current = $this_FunctionDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getListTypeAction_0_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeTypeParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_0_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getSetTypeAction_1_0(),
            $current);
    }
)
	otherlv_5=LeftCurlyBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeTypeParserRuleCall_1_2_0()); 
	    }
		lv_type_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightCurlyBracket
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_1_3());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBaseTypeParserRuleCall_2_0()); 
    }
    this_BaseType_8=ruleBaseType
    {
        $current = $this_BaseType_8.current;
        afterParserOrEnumRuleCall();
    }
(
	otherlv_9=LessThanSign
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getLessThanSignKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_paramType_10_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"paramType",
        		lv_paramType_10_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=GreaterThanSign
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_1_2());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getLibraryFnTypeAction_3_0(),
            $current);
    }
)(
(
		lv_libName_13_0=RULE_ID
		{
			newLeafNode(lv_libName_13_0, grammarAccess.getTypeAccess().getLibNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"libName",
        		lv_libName_13_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_14=FullStop
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getFullStopKeyword_3_2());
    }
(
(
		lv_fnType_15_0=RULE_ID
		{
			newLeafNode(lv_fnType_15_0, grammarAccess.getTypeAccess().getFnTypeIDTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fnType",
        		lv_fnType_15_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)))
;





// Entry rule entryRuleBaseType
entryRuleBaseType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBaseTypeRule()); }
	 iv_ruleBaseType=ruleBaseType 
	 { $current=$iv_ruleBaseType.current; } 
	 EOF 
;

// Rule BaseType
ruleBaseType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_type_0_1=
	Int
    {
        newLeafNode(lv_type_0_1, grammarAccess.getBaseTypeAccess().getTypeIntKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=
	Real
    {
        newLeafNode(lv_type_0_2, grammarAccess.getBaseTypeAccess().getTypeRealKeyword_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

    |		lv_type_0_3=
	String
    {
        newLeafNode(lv_type_0_3, grammarAccess.getBaseTypeAccess().getTypeStringKeyword_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_3, null);
	    }

    |		lv_type_0_4=
	Bool
    {
        newLeafNode(lv_type_0_4, grammarAccess.getBaseTypeAccess().getTypeBoolKeyword_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_4, null);
	    }

    |		lv_type_0_5=
	Range
    {
        newLeafNode(lv_type_0_5, grammarAccess.getBaseTypeAccess().getTypeRangeKeyword_0_4());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_5, null);
	    }

    |		lv_type_0_6=
	Aadl
    {
        newLeafNode(lv_type_0_6, grammarAccess.getBaseTypeAccess().getTypeAadlKeyword_0_5());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_6, null);
	    }

    |		lv_type_0_7=
	Component
    {
        newLeafNode(lv_type_0_7, grammarAccess.getBaseTypeAccess().getTypeComponentKeyword_0_6());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_7, null);
	    }

    |		lv_type_0_8=
	Abstract
    {
        newLeafNode(lv_type_0_8, grammarAccess.getBaseTypeAccess().getTypeAbstractKeyword_0_7());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_8, null);
	    }

    |		lv_type_0_9=
	Bus
    {
        newLeafNode(lv_type_0_9, grammarAccess.getBaseTypeAccess().getTypeBusKeyword_0_8());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_9, null);
	    }

    |		lv_type_0_10=
	Data
    {
        newLeafNode(lv_type_0_10, grammarAccess.getBaseTypeAccess().getTypeDataKeyword_0_9());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_10, null);
	    }

    |		lv_type_0_11=
	Device
    {
        newLeafNode(lv_type_0_11, grammarAccess.getBaseTypeAccess().getTypeDeviceKeyword_0_10());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_11, null);
	    }

    |		lv_type_0_12=
	Memory
    {
        newLeafNode(lv_type_0_12, grammarAccess.getBaseTypeAccess().getTypeMemoryKeyword_0_11());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_12, null);
	    }

    |		lv_type_0_13=
	Processor
    {
        newLeafNode(lv_type_0_13, grammarAccess.getBaseTypeAccess().getTypeProcessorKeyword_0_12());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_13, null);
	    }

    |		lv_type_0_14=
	Process
    {
        newLeafNode(lv_type_0_14, grammarAccess.getBaseTypeAccess().getTypeProcessKeyword_0_13());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_14, null);
	    }

    |		lv_type_0_15=
	Subprogram_group
    {
        newLeafNode(lv_type_0_15, grammarAccess.getBaseTypeAccess().getTypeSubprogram_groupKeyword_0_14());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_15, null);
	    }

    |		lv_type_0_16=
	Subprogram
    {
        newLeafNode(lv_type_0_16, grammarAccess.getBaseTypeAccess().getTypeSubprogramKeyword_0_15());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_16, null);
	    }

    |		lv_type_0_17=
	KW_System
    {
        newLeafNode(lv_type_0_17, grammarAccess.getBaseTypeAccess().getTypeSystemKeyword_0_16());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_17, null);
	    }

    |		lv_type_0_18=
	Thread_group
    {
        newLeafNode(lv_type_0_18, grammarAccess.getBaseTypeAccess().getTypeThread_groupKeyword_0_17());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_18, null);
	    }

    |		lv_type_0_19=
	Thread
    {
        newLeafNode(lv_type_0_19, grammarAccess.getBaseTypeAccess().getTypeThreadKeyword_0_18());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_19, null);
	    }

    |		lv_type_0_20=
	Virtual_bus
    {
        newLeafNode(lv_type_0_20, grammarAccess.getBaseTypeAccess().getTypeVirtual_busKeyword_0_19());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_20, null);
	    }

    |		lv_type_0_21=
	Virtual_processor
    {
        newLeafNode(lv_type_0_21, grammarAccess.getBaseTypeAccess().getTypeVirtual_processorKeyword_0_20());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_21, null);
	    }

    |		lv_type_0_22=
	Connection
    {
        newLeafNode(lv_type_0_22, grammarAccess.getBaseTypeAccess().getTypeConnectionKeyword_0_21());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_22, null);
	    }

    |		lv_type_0_23=
	Property
    {
        newLeafNode(lv_type_0_23, grammarAccess.getBaseTypeAccess().getTypePropertyKeyword_0_22());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_23, null);
	    }

    |		lv_type_0_24=
	Feature
    {
        newLeafNode(lv_type_0_24, grammarAccess.getBaseTypeAccess().getTypeFeatureKeyword_0_23());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_24, null);
	    }

    |		lv_type_0_25=
	Port
    {
        newLeafNode(lv_type_0_25, grammarAccess.getBaseTypeAccess().getTypePortKeyword_0_24());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_25, null);
	    }

    |		lv_type_0_26=
	Data_port
    {
        newLeafNode(lv_type_0_26, grammarAccess.getBaseTypeAccess().getTypeData_portKeyword_0_25());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_26, null);
	    }

    |		lv_type_0_27=
	Event_port
    {
        newLeafNode(lv_type_0_27, grammarAccess.getBaseTypeAccess().getTypeEvent_portKeyword_0_26());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_27, null);
	    }

    |		lv_type_0_28=
	Event_data_port
    {
        newLeafNode(lv_type_0_28, grammarAccess.getBaseTypeAccess().getTypeEvent_data_portKeyword_0_27());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_28, null);
	    }

    |		lv_type_0_29=
	Feature_group
    {
        newLeafNode(lv_type_0_29, grammarAccess.getBaseTypeAccess().getTypeFeature_groupKeyword_0_28());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_29, null);
	    }

    |		lv_type_0_30=
	Access
    {
        newLeafNode(lv_type_0_30, grammarAccess.getBaseTypeAccess().getTypeAccessKeyword_0_29());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_30, null);
	    }

    |		lv_type_0_31=
	Bus_access
    {
        newLeafNode(lv_type_0_31, grammarAccess.getBaseTypeAccess().getTypeBus_accessKeyword_0_30());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_31, null);
	    }

    |		lv_type_0_32=
	Provides_bus_access
    {
        newLeafNode(lv_type_0_32, grammarAccess.getBaseTypeAccess().getTypeProvides_bus_accessKeyword_0_31());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_32, null);
	    }

    |		lv_type_0_33=
	Requires_bus_access
    {
        newLeafNode(lv_type_0_33, grammarAccess.getBaseTypeAccess().getTypeRequires_bus_accessKeyword_0_32());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_33, null);
	    }

    |		lv_type_0_34=
	Data_access
    {
        newLeafNode(lv_type_0_34, grammarAccess.getBaseTypeAccess().getTypeData_accessKeyword_0_33());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_34, null);
	    }

    |		lv_type_0_35=
	Provides_data_access
    {
        newLeafNode(lv_type_0_35, grammarAccess.getBaseTypeAccess().getTypeProvides_data_accessKeyword_0_34());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_35, null);
	    }

    |		lv_type_0_36=
	Requires_data_access
    {
        newLeafNode(lv_type_0_36, grammarAccess.getBaseTypeAccess().getTypeRequires_data_accessKeyword_0_35());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_36, null);
	    }

    |		lv_type_0_37=
	Subprogram_access
    {
        newLeafNode(lv_type_0_37, grammarAccess.getBaseTypeAccess().getTypeSubprogram_accessKeyword_0_36());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_37, null);
	    }

    |		lv_type_0_38=
	Provides_subprogram_access
    {
        newLeafNode(lv_type_0_38, grammarAccess.getBaseTypeAccess().getTypeProvides_subprogram_accessKeyword_0_37());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_38, null);
	    }

    |		lv_type_0_39=
	Requires_subprogram_access
    {
        newLeafNode(lv_type_0_39, grammarAccess.getBaseTypeAccess().getTypeRequires_subprogram_accessKeyword_0_38());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_39, null);
	    }

    |		lv_type_0_40=
	Subprogram_group_access
    {
        newLeafNode(lv_type_0_40, grammarAccess.getBaseTypeAccess().getTypeSubprogram_group_accessKeyword_0_39());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_40, null);
	    }

    |		lv_type_0_41=
	Provides_subprogram_group_access
    {
        newLeafNode(lv_type_0_41, grammarAccess.getBaseTypeAccess().getTypeProvides_subprogram_group_accessKeyword_0_40());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_41, null);
	    }

    |		lv_type_0_42=
	Requires_subprogram_group_access
    {
        newLeafNode(lv_type_0_42, grammarAccess.getBaseTypeAccess().getTypeRequires_subprogram_group_accessKeyword_0_41());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_42, null);
	    }

    |		lv_type_0_43=
	Flow_specification
    {
        newLeafNode(lv_type_0_43, grammarAccess.getBaseTypeAccess().getTypeFlow_specificationKeyword_0_42());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_43, null);
	    }

    |		lv_type_0_44=
	End_to_end_flow
    {
        newLeafNode(lv_type_0_44, grammarAccess.getBaseTypeAccess().getTypeEnd_to_end_flowKeyword_0_43());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_44, null);
	    }

)

)
)
;





// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
RULE_ID

)
)
Colon
(
(
ruleType
)
)))=>((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgAccess().getColonKeyword_0_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getTypeTypeParserRuleCall_0_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgAccess().getQuantArgAction_1_0(),
            $current);
    }
)(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_5=Colon
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getExprExprParserRuleCall_1_3_0()); 
	    }
		lv_expr_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=EqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getArgsArgParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getArgsArgParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyDefinitionBodyParserRuleCall_4_0()); 
	    }
		lv_body_6_0=ruleDefinitionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.DefinitionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinitionBody
entryRuleDefinitionBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionBodyRule()); }
	 iv_ruleDefinitionBody=ruleDefinitionBody 
	 { $current=$iv_ruleDefinitionBody.current; } 
	 EOF 
;

// Rule DefinitionBody
ruleDefinitionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionBodyAccess().getFunctionBodyAction_0_0(),
            $current);
    }
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionBodyAccess().getColonKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getTypeTypeParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=EqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionBodyAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getExprExprParserRuleCall_0_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionBodyAccess().getClaimBodyAction_1_0(),
            $current);
    }
)
	otherlv_6=LessThanSignEqualsSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionBodyAccess().getLessThanSignEqualsSignKeyword_1_1());
    }
(
	otherlv_7=AsteriskAsterisk
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefinitionBodyAccess().getAsteriskAsteriskKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getClaimClaimTextParserRuleCall_1_2_1_0()); 
	    }
		lv_claim_8_0=ruleClaimText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		add(
       			$current, 
       			"claim",
        		lv_claim_8_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.ClaimText");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_9=AsteriskAsterisk
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefinitionBodyAccess().getAsteriskAsteriskKeyword_1_2_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getExprExprParserRuleCall_1_3_0()); 
	    }
		lv_expr_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_10_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleClaimText
entryRuleClaimText returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClaimTextRule()); }
	 iv_ruleClaimText=ruleClaimText 
	 { $current=$iv_ruleClaimText.current; } 
	 EOF 
;

// Rule ClaimText
ruleClaimText returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClaimTextAccess().getClaimStringAction_0_0(),
            $current);
    }
)(
(
		lv_str_1_0=RULE_STRING
		{
			newLeafNode(lv_str_1_0, grammarAccess.getClaimTextAccess().getStrSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClaimTextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"org.osate.xtext.aadl2.properties.Properties.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClaimTextAccess().getClaimArgAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClaimTextRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClaimTextAccess().getArgClaimTextVarCrossReference_1_1_0()); 
	}

)
)(
	otherlv_4=PercentSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getClaimTextAccess().getPercentSignKeyword_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClaimTextRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getClaimTextAccess().getUnitUnitLiteralCrossReference_1_2_1_0()); 
	}

)
))?))
;







// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getImpliesExprParserRuleCall()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    {
        $current = $this_ImpliesExpr_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    {
        $current = $this_OrExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

EqualsSignGreaterThanSign


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	EqualsSignGreaterThanSign
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    {
        $current = $this_AndExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)((
(

Or


)
)
    |(
(

Orelse


)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)((
(
		lv_op_2_0=
	Or
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)
    |(
(
		lv_op_3_0=
	Orelse
    {
        newLeafNode(lv_op_3_0, grammarAccess.getOrExprAccess().getOpOrelseKeyword_1_0_0_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_3_0, "orelse");
	    }

)
))))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getInstanceOfExprParserRuleCall_0()); 
    }
    this_InstanceOfExpr_0=ruleInstanceOfExpr
    {
        $current = $this_InstanceOfExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)((
(

And


)
)
    |(
(

Andthen


)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)((
(
		lv_op_2_0=
	And
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)
    |(
(
		lv_op_3_0=
	Andthen
    {
        newLeafNode(lv_op_3_0, grammarAccess.getAndExprAccess().getOpAndthenKeyword_1_0_0_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_3_0, "andthen");
	    }

)
))))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightInstanceOfExprParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleInstanceOfExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.InstanceOfExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpr
entryRuleInstanceOfExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstanceOfExprRule()); }
	 iv_ruleInstanceOfExpr=ruleInstanceOfExpr 
	 { $current=$iv_ruleInstanceOfExpr.current; } 
	 EOF 
;

// Rule InstanceOfExpr
ruleInstanceOfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstanceOfExprAccess().getRelationalExprParserRuleCall_0()); 
    }
    this_RelationalExpr_0=ruleRelationalExpr
    {
        $current = $this_RelationalExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)
Instanceof
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInstanceOfExprAccess().getInstanceOfExprExprAction_1_0_0_0(),
            $current);
    }
)
	otherlv_2=Instanceof
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceOfExprAccess().getInstanceofKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExprAccess().getTypeBaseTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleBaseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.BaseType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw=LessThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw=GreaterThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw=LessThanSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    {
        $current = $this_PlusExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPlusExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getTimesExprParserRuleCall_0()); 
    }
    this_TimesExpr_0=ruleTimesExpr
    {
        $current = $this_TimesExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

PlusSign


    |		
HyphenMinus


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	PlusSign
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	HyphenMinus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightTimesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTimesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.TimesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTimesExpr
entryRuleTimesExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTimesExprRule()); }
	 iv_ruleTimesExpr=ruleTimesExpr 
	 { $current=$iv_ruleTimesExpr.current; } 
	 EOF 
;

// Rule TimesExpr
ruleTimesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimesExprAccess().getExpExprParserRuleCall_0()); 
    }
    this_ExpExpr_0=ruleExpExpr
    {
        $current = $this_ExpExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

Asterisk


    |		
Solidus


    |		
PercentSign


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	Asterisk
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTimesExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	Solidus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTimesExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=
	PercentSign
    {
        newLeafNode(lv_op_2_3, grammarAccess.getTimesExprAccess().getOpPercentSignKeyword_1_0_0_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesExprAccess().getRightExpExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleExpExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.ExpExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpExpr
entryRuleExpExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpExprRule()); }
	 iv_ruleExpExpr=ruleExpExpr 
	 { $current=$iv_ruleExpExpr.current; } 
	 EOF 
;

// Rule ExpExpr
ruleExpExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpExprAccess().getPrefixExprParserRuleCall_0()); 
    }
    this_PrefixExpr_0=rulePrefixExpr
    {
        $current = $this_PrefixExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

CircumflexAccent


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	CircumflexAccent
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExpExprAccess().getOpCircumflexAccentKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "^");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpExprAccess().getRightPrefixExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	 iv_rulePrefixExpr=rulePrefixExpr 
	 { $current=$iv_rulePrefixExpr.current; } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=
	HyphenMinus
    {
        newLeafNode(lv_op_1_1, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=
	Not
    {
        newLeafNode(lv_op_1_2, grammarAccess.getPrefixExprAccess().getOpNotKeyword_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getCastExprAction_1_0(),
            $current);
    }
)
	otherlv_4=LeftParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrefixExprAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getTypeBaseTypeParserRuleCall_1_2_0()); 
	    }
		lv_type_5_0=ruleBaseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.BaseType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrefixExprAccess().getRightParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_1_4_0()); 
	    }
		lv_expr_7_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrefixExprAccess().getAtomicExprParserRuleCall_2()); 
    }
    this_AtomicExpr_8=ruleAtomicExpr
    {
        $current = $this_AtomicExpr_8.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicExpr
entryRuleAtomicExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAtomicExprRule()); }
	 iv_ruleAtomicExpr=ruleAtomicExpr 
	 { $current=$iv_ruleAtomicExpr.current; } 
	 EOF 
;

// Rule AtomicExpr
ruleAtomicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIdExprAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getIdNamedElementCrossReference_0_1_0()); 
	    }
		ruleQCREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getThisExprAction_1_0(),
            $current);
    }
)
	otherlv_3=This
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomicExprAccess().getThisKeyword_1_1());
    }
(
	otherlv_4=FullStop
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicExprAccess().getFullStopKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getSubNestedDotIDParserRuleCall_1_2_1_0()); 
	    }
		lv_sub_5_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_5_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getFailExprAction_2_0(),
            $current);
    }
)
	otherlv_7=Fail
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomicExprAccess().getFailKeyword_2_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValExprParserRuleCall_2_2_0_0()); 
	    }
		lv_val_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_8_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_9=AsteriskAsterisk
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomicExprAccess().getAsteriskAsteriskKeyword_2_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFailmsgClaimTextParserRuleCall_2_2_1_1_0()); 
	    }
		lv_failmsg_10_0=ruleClaimText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"failmsg",
        		lv_failmsg_10_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.ClaimText");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_11=AsteriskAsterisk
    {
    	newLeafNode(otherlv_11, grammarAccess.getAtomicExprAccess().getAsteriskAsteriskKeyword_2_2_1_2());
    }
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIntExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValIntegerTermParserRuleCall_3_1_0()); 
	    }
		lv_val_13_0=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_13_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getRealExprAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValRealTermParserRuleCall_4_1_0()); 
	    }
		lv_val_15_0=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_15_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.RealTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getBoolExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValBooleanLiteralParserRuleCall_5_1_0()); 
	    }
		lv_val_17_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_17_0, 
        		"org.osate.xtext.aadl2.properties.Properties.BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getStringExprAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValStringTermParserRuleCall_6_1_0()); 
	    }
		lv_val_19_0=ruleStringTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_19_0, 
        		"org.osate.xtext.aadl2.properties.Properties.StringTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIfThenElseExprAction_7_0(),
            $current);
    }
)
	otherlv_21=If
    {
    	newLeafNode(otherlv_21, grammarAccess.getAtomicExprAccess().getIfKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getCondExprParserRuleCall_7_2_0()); 
	    }
		lv_cond_22_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_22_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_23=Then
    {
    	newLeafNode(otherlv_23, grammarAccess.getAtomicExprAccess().getThenKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getThenExprParserRuleCall_7_4_0()); 
	    }
		lv_then_24_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_24_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_25=Else
    {
    	newLeafNode(otherlv_25, grammarAccess.getAtomicExprAccess().getElseKeyword_7_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getElseExprParserRuleCall_7_6_0()); 
	    }
		lv_else_26_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_26_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getQuantifiedExprAction_8_0(),
            $current);
    }
)(
(
(
		lv_quant_28_1=
	Forall
    {
        newLeafNode(lv_quant_28_1, grammarAccess.getAtomicExprAccess().getQuantForallKeyword_8_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_28_1, null);
	    }

    |		lv_quant_28_2=
	Exists
    {
        newLeafNode(lv_quant_28_2, grammarAccess.getAtomicExprAccess().getQuantExistsKeyword_8_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_28_2, null);
	    }

)

)
)(
	otherlv_29=LeftParenthesis
    {
    	newLeafNode(otherlv_29, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_8_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsArgParserRuleCall_8_2_1_0()); 
	    }
		lv_args_30_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_30_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_31=RightParenthesis
    {
    	newLeafNode(otherlv_31, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_8_2_2());
    }
)+
	otherlv_32=FullStop
    {
    	newLeafNode(otherlv_32, grammarAccess.getAtomicExprAccess().getFullStopKeyword_8_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprExprParserRuleCall_8_4_0()); 
	    }
		lv_expr_33_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_33_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
)(
(
RULE_ID

)
)
FullStop
(
(
RULE_ID

)
)
LeftParenthesis
((
(
ruleExpr
)
)(
Comma
(
(
ruleExpr
)
))*)?
RightParenthesis
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getLibraryFnCallExprAction_9_0_0(),
            $current);
    }
)(
(
		lv_libName_35_0=RULE_ID
		{
			newLeafNode(lv_libName_35_0, grammarAccess.getAtomicExprAccess().getLibNameIDTerminalRuleCall_9_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"libName",
        		lv_libName_35_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_36=FullStop
    {
    	newLeafNode(otherlv_36, grammarAccess.getAtomicExprAccess().getFullStopKeyword_9_0_2());
    }
(
(
		lv_fnName_37_0=RULE_ID
		{
			newLeafNode(lv_fnName_37_0, grammarAccess.getAtomicExprAccess().getFnNameIDTerminalRuleCall_9_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fnName",
        		lv_fnName_37_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_38=LeftParenthesis
    {
    	newLeafNode(otherlv_38, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_9_0_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_0_5_0_0()); 
	    }
		lv_args_39_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_39_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_40=Comma
    {
    	newLeafNode(otherlv_40, grammarAccess.getAtomicExprAccess().getCommaKeyword_9_0_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_0_5_1_1_0()); 
	    }
		lv_args_41_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_41_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_42=RightParenthesis
    {
    	newLeafNode(otherlv_42, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_9_0_6());
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getBuiltInFnCallExprAction_10_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFnBuiltInFnParserRuleCall_10_1_0()); 
	    }
		lv_fn_44_0=ruleBuiltInFn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"fn",
        		lv_fn_44_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.BuiltInFn");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_45=LeftParenthesis
    {
    	newLeafNode(otherlv_45, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_10_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_10_3_0_0()); 
	    }
		lv_args_46_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_46_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_47=Comma
    {
    	newLeafNode(otherlv_47, grammarAccess.getAtomicExprAccess().getCommaKeyword_10_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_10_3_1_1_0()); 
	    }
		lv_args_48_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_48_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_49=RightParenthesis
    {
    	newLeafNode(otherlv_49, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_10_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getFnCallExprAction_11_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_51=RULE_ID
	{
		newLeafNode(otherlv_51, grammarAccess.getAtomicExprAccess().getFnFunctionDefinitionCrossReference_11_1_0()); 
	}

)
)
	otherlv_52=LeftParenthesis
    {
    	newLeafNode(otherlv_52, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_11_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_11_3_0_0()); 
	    }
		lv_args_53_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_53_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_54=Comma
    {
    	newLeafNode(otherlv_54, grammarAccess.getAtomicExprAccess().getCommaKeyword_11_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_11_3_1_1_0()); 
	    }
		lv_args_55_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_55_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_56=RightParenthesis
    {
    	newLeafNode(otherlv_56, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_11_4());
    }
)
    |(
	otherlv_57=LeftSquareBracket
    {
    	newLeafNode(otherlv_57, grammarAccess.getAtomicExprAccess().getLeftSquareBracketKeyword_12_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_12_1()); 
    }
    this_Expr_58=ruleExpr
    {
        $current = $this_Expr_58.current;
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtomicExprAccess().getListFilterMapExprMapAction_12_2_0_0(),
            $current);
    }
)
	otherlv_60=For
    {
    	newLeafNode(otherlv_60, grammarAccess.getAtomicExprAccess().getForKeyword_12_2_0_1());
    }
(
	otherlv_61=LeftParenthesis
    {
    	newLeafNode(otherlv_61, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_12_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsArgParserRuleCall_12_2_0_2_1_0()); 
	    }
		lv_args_62_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_62_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_63=RightParenthesis
    {
    	newLeafNode(otherlv_63, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_12_2_0_2_2());
    }
)+(
	otherlv_64=VerticalLine
    {
    	newLeafNode(otherlv_64, grammarAccess.getAtomicExprAccess().getVerticalLineKeyword_12_2_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFilterExprParserRuleCall_12_2_0_3_1_0()); 
	    }
		lv_filter_65_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_65_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAtomicExprAccess().getListExprExprsAction_12_2_1_0(),
            $current);
    }
)(
	otherlv_67=Comma
    {
    	newLeafNode(otherlv_67, grammarAccess.getAtomicExprAccess().getCommaKeyword_12_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_12_2_1_1_1_0()); 
	    }
		lv_exprs_68_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_68_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
	otherlv_69=RightSquareBracket
    {
    	newLeafNode(otherlv_69, grammarAccess.getAtomicExprAccess().getRightSquareBracketKeyword_12_3());
    }
)
    |(
	otherlv_70=LeftCurlyBracket
    {
    	newLeafNode(otherlv_70, grammarAccess.getAtomicExprAccess().getLeftCurlyBracketKeyword_13_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_13_1()); 
    }
    this_Expr_71=ruleExpr
    {
        $current = $this_Expr_71.current;
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtomicExprAccess().getSetFilterMapExprMapAction_13_2_0_0(),
            $current);
    }
)
	otherlv_73=For
    {
    	newLeafNode(otherlv_73, grammarAccess.getAtomicExprAccess().getForKeyword_13_2_0_1());
    }
(
	otherlv_74=LeftParenthesis
    {
    	newLeafNode(otherlv_74, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_13_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsArgParserRuleCall_13_2_0_2_1_0()); 
	    }
		lv_args_75_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_75_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_76=RightParenthesis
    {
    	newLeafNode(otherlv_76, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_13_2_0_2_2());
    }
)+(
	otherlv_77=VerticalLine
    {
    	newLeafNode(otherlv_77, grammarAccess.getAtomicExprAccess().getVerticalLineKeyword_13_2_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFilterExprParserRuleCall_13_2_0_3_1_0()); 
	    }
		lv_filter_78_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_78_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAtomicExprAccess().getSetExprExprsAction_13_2_1_0(),
            $current);
    }
)(
	otherlv_80=Comma
    {
    	newLeafNode(otherlv_80, grammarAccess.getAtomicExprAccess().getCommaKeyword_13_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_13_2_1_1_1_0()); 
	    }
		lv_exprs_81_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_81_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
	otherlv_82=RightCurlyBracket
    {
    	newLeafNode(otherlv_82, grammarAccess.getAtomicExprAccess().getRightCurlyBracketKeyword_13_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getListExprAction_14_0(),
            $current);
    }
)
	otherlv_84=LeftSquareBracket
    {
    	newLeafNode(otherlv_84, grammarAccess.getAtomicExprAccess().getLeftSquareBracketKeyword_14_1());
    }

	otherlv_85=RightSquareBracket
    {
    	newLeafNode(otherlv_85, grammarAccess.getAtomicExprAccess().getRightSquareBracketKeyword_14_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getSetExprAction_15_0(),
            $current);
    }
)
	otherlv_87=LeftCurlyBracket
    {
    	newLeafNode(otherlv_87, grammarAccess.getAtomicExprAccess().getLeftCurlyBracketKeyword_15_1());
    }

	otherlv_88=RightCurlyBracket
    {
    	newLeafNode(otherlv_88, grammarAccess.getAtomicExprAccess().getRightCurlyBracketKeyword_15_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getLetExprAction_16_0(),
            $current);
    }
)
	otherlv_90=Let
    {
    	newLeafNode(otherlv_90, grammarAccess.getAtomicExprAccess().getLetKeyword_16_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getBindingLetBindingParserRuleCall_16_2_0()); 
	    }
		lv_binding_91_0=ruleLetBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"binding",
        		lv_binding_91_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.LetBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_92=Semicolon
    {
    	newLeafNode(otherlv_92, grammarAccess.getAtomicExprAccess().getSemicolonKeyword_16_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprExprParserRuleCall_16_4_0()); 
	    }
		lv_expr_93_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_93_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_94=LeftParenthesis
    {
    	newLeafNode(otherlv_94, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_17_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_17_1()); 
    }
    this_Expr_95=ruleExpr
    {
        $current = $this_Expr_95.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_96=RightParenthesis
    {
    	newLeafNode(otherlv_96, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_17_2());
    }
))
;





// Entry rule entryRuleLetBinding
entryRuleLetBinding returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLetBindingRule()); }
	 iv_ruleLetBinding=ruleLetBinding 
	 { $current=$iv_ruleLetBinding.current; } 
	 EOF 
;

// Rule LetBinding
ruleLetBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLetBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetBindingAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetBindingAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetBindingRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=EqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getLetBindingAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetBindingAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetBindingRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBuiltInFn
entryRuleBuiltInFn returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBuiltInFnRule()); } 
	 iv_ruleBuiltInFn=ruleBuiltInFn 
	 { $current=$iv_ruleBuiltInFn.current.getText(); }  
	 EOF 
;

// Rule BuiltInFn
ruleBuiltInFn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Has_property 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_propertyKeyword_0()); 
    }

    |
	kw=Property 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPropertyKeyword_1()); 
    }

    |
	kw=Property_member 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getProperty_memberKeyword_2()); 
    }

    |
	kw=Has_parent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_parentKeyword_3()); 
    }

    |
	kw=Parent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getParentKeyword_4()); 
    }

    |
	kw=Name 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getNameKeyword_5()); 
    }

    |
	kw=Type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getTypeKeyword_6()); 
    }

    |
	kw=Has_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_typeKeyword_7()); 
    }

    |
	kw=Is_in_array 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_in_arrayKeyword_8()); 
    }

    |
	kw=Has_prototypes 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_prototypesKeyword_9()); 
    }

    |
	kw=Has_modes 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_modesKeyword_10()); 
    }

    |
	kw=Is_processor 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_processorKeyword_11()); 
    }

    |
	kw=Is_virtual_processor 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_virtual_processorKeyword_12()); 
    }

    |
	kw=Is_system 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_systemKeyword_13()); 
    }

    |
	kw=Is_bus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_busKeyword_14()); 
    }

    |
	kw=Is_virtual_bus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_virtual_busKeyword_15()); 
    }

    |
	kw=Is_device 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_deviceKeyword_16()); 
    }

    |
	kw=Is_memory 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_memoryKeyword_17()); 
    }

    |
	kw=Is_thread 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_threadKeyword_18()); 
    }

    |
	kw=Is_process 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_processKeyword_19()); 
    }

    |
	kw=Is_data 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_dataKeyword_20()); 
    }

    |
	kw=Is_subprogram 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_subprogramKeyword_21()); 
    }

    |
	kw=Is_of_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_of_typeKeyword_22()); 
    }

    |
	kw=Is_bound_to 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_bound_toKeyword_23()); 
    }

    |
	kw=Has_member 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_memberKeyword_24()); 
    }

    |
	kw=Features 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFeaturesKeyword_25()); 
    }

    |
	kw=Connections 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getConnectionsKeyword_26()); 
    }

    |
	kw=Enumerated_values 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getEnumerated_valuesKeyword_27()); 
    }

    |
	kw=Subcomponents 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSubcomponentsKeyword_28()); 
    }

    |
	kw=Source 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSourceKeyword_29()); 
    }

    |
	kw=Destination 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDestinationKeyword_30()); 
    }

    |
	kw=Direction 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDirectionKeyword_31()); 
    }

    |
	kw=Is_event_port 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_event_portKeyword_32()); 
    }

    |
	kw=Is_abstract_feature 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_abstract_featureKeyword_33()); 
    }

    |
	kw=Is_data_port 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_data_portKeyword_34()); 
    }

    |
	kw=Is_port 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_portKeyword_35()); 
    }

    |
	kw=Is_data_access 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_data_accessKeyword_36()); 
    }

    |
	kw=Lower_bound 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getLower_boundKeyword_37()); 
    }

    |
	kw=Upper_bound 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getUpper_boundKeyword_38()); 
    }

    |
	kw=Member 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMemberKeyword_39()); 
    }

    |
	kw=Length 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getLengthKeyword_40()); 
    }

    |
	kw=Size 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSizeKeyword_41()); 
    }

    |
	kw=Sum 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSumKeyword_42()); 
    }

    |
	kw=Append 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getAppendKeyword_43()); 
    }

    |
	kw=Head 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHeadKeyword_44()); 
    }

    |
	kw=Tail 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getTailKeyword_45()); 
    }

    |
	kw=As_set 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getAs_setKeyword_46()); 
    }

    |
	kw=Union 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getUnionKeyword_47()); 
    }

    |
	kw=Intersect 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIntersectKeyword_48()); 
    }

    |
	kw=As_list 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getAs_listKeyword_49()); 
    }

    |
	kw=Instance 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getInstanceKeyword_50()); 
    }

    |
	kw=Instances 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getInstancesKeyword_51()); 
    }

    |
	kw=Debug 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDebugKeyword_52()); 
    }

    |
	kw=Analysis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getAnalysisKeyword_53()); 
    }

    |
	kw=Receive_error 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getReceive_errorKeyword_54()); 
    }

    |
	kw=Contain_error 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getContain_errorKeyword_55()); 
    }

    |
	kw=Propagate_error 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPropagate_errorKeyword_56()); 
    }

    |
	kw=Error_state_reachable 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getError_state_reachableKeyword_57()); 
    }

    |
	kw=Flow_source 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFlow_sourceKeyword_58()); 
    }

    |
	kw=Flow_destination 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFlow_destinationKeyword_59()); 
    }

    |
	kw=Flow_elements 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFlow_elementsKeyword_60()); 
    }

    |
	kw=Flow_specifications 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFlow_specificationsKeyword_61()); 
    }

    |
	kw=End_to_end_flows 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getEnd_to_end_flowsKeyword_62()); 
    }
)
    ;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueUnsignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.UnsignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedReal
entryRuleUnsignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnsignedRealRule()); } 
	 iv_ruleUnsignedReal=ruleUnsignedReal 
	 { $current=$iv_ruleUnsignedReal.current.getText(); }  
	 EOF 
;

// Rule UnsignedReal
ruleUnsignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_REAL_LIT_0=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_0);
    }

    { 
    newLeafNode(this_REAL_LIT_0, grammarAccess.getUnsignedRealAccess().getREAL_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueUnsignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.UnsignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnsignedIntRule()); } 
	 iv_ruleUnsignedInt=ruleUnsignedInt 
	 { $current=$iv_ruleUnsignedInt.current.getText(); }  
	 EOF 
;

// Rule UnsignedInt
ruleUnsignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getUnsignedIntAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleResoluteSubclause
entryRuleResoluteSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResoluteSubclauseRule()); }
	 iv_ruleResoluteSubclause=ruleResoluteSubclause 
	 { $current=$iv_ruleResoluteSubclause.current; } 
	 EOF 
;

// Rule ResoluteSubclause
ruleResoluteSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResoluteSubclauseAccess().getResoluteSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResoluteSubclauseAccess().getProvesProveStatementParserRuleCall_1_0()); 
	    }
		lv_proves_1_0=ruleProveStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResoluteSubclauseRule());
	        }
       		add(
       			$current, 
       			"proves",
        		lv_proves_1_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.ProveStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNestedDotID
entryRuleNestedDotID returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNestedDotIDRule()); }
	 iv_ruleNestedDotID=ruleNestedDotID 
	 { $current=$iv_ruleNestedDotID.current; } 
	 EOF 
;

// Rule NestedDotID
ruleNestedDotID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedDotIDRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNestedDotIDAccess().getBaseNamedElementCrossReference_0_0()); 
	}

)
)(
	otherlv_1=FullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedDotIDAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getSubNestedDotIDParserRuleCall_1_1_0()); 
	    }
		lv_sub_2_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedDotIDRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_2_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleProveStatement
entryRuleProveStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProveStatementRule()); }
	 iv_ruleProveStatement=ruleProveStatement 
	 { $current=$iv_ruleProveStatement.current; } 
	 EOF 
;

// Rule ProveStatement
ruleProveStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Prove
    {
    	newLeafNode(otherlv_0, grammarAccess.getProveStatementAccess().getProveKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProveStatementAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProveStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"com.rockwellcollins.atc.resolute.Resolute.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainedPropertyAssociationRule()); }
	 iv_ruleContainedPropertyAssociation=ruleContainedPropertyAssociation 
	 { $current=$iv_ruleContainedPropertyAssociation.current; } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQPREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |(
(
		lv_append_2_0=
	PlusSignEqualsSignGreaterThanSign
    {
        newLeafNode(lv_append_2_0, grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "append", true, "+=>");
	    }

)
))(
(
		lv_constant_3_0=
	Constant
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); 
	    }
		lv_ownedValue_4_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_4_0, 
        		"org.osate.xtext.aadl2.properties.Properties.OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); 
	    }
		lv_ownedValue_6_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_6_0, 
        		"org.osate.xtext.aadl2.properties.Properties.OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(
    { 
        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToKeywordsParserRuleCall_4_0()); 
    }
ruleAppliesToKeywords
    {
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_1_0()); 
	    }
		lv_appliesTo_8_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_8_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_9=Comma
    {
    	newLeafNode(otherlv_9, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_1_0()); 
	    }
		lv_appliesTo_10_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_10_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
    { 
        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingKeywordsParserRuleCall_5_0()); 
    }
ruleInBindingKeywords
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_12=LeftParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_2_0()); 
	    }
		ruleQCREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_14=RightParenthesis
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_3());
    }
)?
	otherlv_15=Semicolon
    {
    	newLeafNode(otherlv_15, grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6());
    }
)
;









// Entry rule entryRuleContainmentPath
entryRuleContainmentPath returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathRule()); }
	 iv_ruleContainmentPath=ruleContainmentPath 
	 { $current=$iv_ruleContainmentPath.current; } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); 
	    }
		lv_path_0_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOptionalModalPropertyValueRule()); }
	 iv_ruleOptionalModalPropertyValue=ruleOptionalModalPropertyValue 
	 { $current=$iv_ruleOptionalModalPropertyValue.current; } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalModalPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getInModesKeywordsParserRuleCall_1_0()); 
    }
ruleInModesKeywords
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_2_0()); 
	}

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_1_0()); 
	}

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_4());
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRecordTermParserRuleCall_0()); 
    }
    this_RecordTerm_0=ruleRecordTerm
    {
        $current = $this_RecordTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getReferenceTermParserRuleCall_1()); 
    }
    this_ReferenceTerm_1=ruleReferenceTerm
    {
        $current = $this_ReferenceTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComponentClassifierTermParserRuleCall_2()); 
    }
    this_ComponentClassifierTerm_2=ruleComponentClassifierTerm
    {
        $current = $this_ComponentClassifierTerm_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComputedTermParserRuleCall_3()); 
    }
    this_ComputedTerm_3=ruleComputedTerm
    {
        $current = $this_ComputedTerm_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getStringTermParserRuleCall_4()); 
    }
    this_StringTerm_4=ruleStringTerm
    {
        $current = $this_StringTerm_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getNumericRangeTermParserRuleCall_5()); 
    }
    this_NumericRangeTerm_5=ruleNumericRangeTerm
    {
        $current = $this_NumericRangeTerm_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRealTermParserRuleCall_6()); 
    }
    this_RealTerm_6=ruleRealTerm
    {
        $current = $this_RealTerm_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getIntegerTermParserRuleCall_7()); 
    }
    this_IntegerTerm_7=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getListTermParserRuleCall_8()); 
    }
    this_ListTerm_8=ruleListTerm
    {
        $current = $this_ListTerm_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getBooleanLiteralParserRuleCall_9()); 
    }
    this_BooleanLiteral_9=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralorReferenceTermParserRuleCall_10()); 
    }
    this_LiteralorReferenceTerm_10=ruleLiteralorReferenceTerm
    {
        $current = $this_LiteralorReferenceTerm_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralorReferenceTerm
entryRuleLiteralorReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralorReferenceTermRule()); }
	 iv_ruleLiteralorReferenceTerm=ruleLiteralorReferenceTerm 
	 { $current=$iv_ruleLiteralorReferenceTerm.current; } 
	 EOF 
;

// Rule LiteralorReferenceTerm
ruleLiteralorReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralorReferenceTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralorReferenceTermAccess().getNamedValueAbstractNamedValueCrossReference_0()); 
	    }
		ruleQPREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=
	True
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |
	otherlv_2=False
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReferenceTerm
entryRuleReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceTermRule()); }
	 iv_ruleReferenceTerm=ruleReferenceTerm 
	 { $current=$iv_ruleReferenceTerm.current; } 
	 EOF 
;

// Rule ReferenceTerm
ruleReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceTermAccess().getReferenceKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getPathContainmentPathElementParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getOwnedFieldValueFieldPropertyAssociationParserRuleCall_1_0()); 
	    }
		lv_ownedFieldValue_1_0=ruleFieldPropertyAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"ownedFieldValue",
        		lv_ownedFieldValue_1_0, 
        		"org.osate.xtext.aadl2.properties.Properties.FieldPropertyAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=RightSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleComputedTerm
entryRuleComputedTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComputedTermRule()); }
	 iv_ruleComputedTerm=ruleComputedTerm 
	 { $current=$iv_ruleComputedTerm.current; } 
	 EOF 
;

// Rule ComputedTerm
ruleComputedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Compute
    {
    	newLeafNode(otherlv_0, grammarAccess.getComputedTermAccess().getComputeKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComputedTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getComputedTermAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComputedTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ID");
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComputedTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentClassifierTerm
entryRuleComponentClassifierTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentClassifierTermRule()); }
	 iv_ruleComponentClassifierTerm=ruleComponentClassifierTerm 
	 { $current=$iv_ruleComponentClassifierTerm.current; } 
	 EOF 
;

// Rule ComponentClassifierTerm
ruleComponentClassifierTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Classifier
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentClassifierTermAccess().getClassifierKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentClassifierTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentClassifierTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentClassifierTermAccess().getClassifierComponentClassifierCrossReference_2_0()); 
	    }
		ruleQCREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentClassifierTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListTerm
entryRuleListTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getListTermRule()); }
	 iv_ruleListTerm=ruleListTerm 
	 { $current=$iv_ruleListTerm.current; } 
	 EOF 
;

// Rule ListTerm
ruleListTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTermAccess().getListValueAction_0(),
            $current);
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_ownedListElement_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getListTermAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_ownedListElement_4_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_4_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getListTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFieldPropertyAssociationRule()); }
	 iv_ruleFieldPropertyAssociation=ruleFieldPropertyAssociation 
	 { $current=$iv_ruleFieldPropertyAssociation.current; } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldPropertyAssociationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); 
	}

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedValue_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldPropertyAssociationRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)*)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); 
	    }
		lv_path_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStringTerm
entryRuleStringTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringTermRule()); }
	 iv_ruleStringTerm=ruleStringTerm 
	 { $current=$iv_ruleStringTerm.current; } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoQuoteStringRule()); } 
	 iv_ruleNoQuoteString=ruleNoQuoteString 
	 { $current=$iv_ruleNoQuoteString.current.getText(); }  
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayRangeAccess().getArrayRangeAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); 
	    }
		lv_lowerBound_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=FullStopFullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); 
	    }
		lv_upperBound_4_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_4_0, 
        		"org.osate.xtext.aadl2.properties.Properties.INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=RightSquareBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"org.osate.xtext.aadl2.properties.Properties.ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;









// Entry rule entryRuleNumericRangeTerm
entryRuleNumericRangeTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumericRangeTermRule()); }
	 iv_ruleNumericRangeTerm=ruleNumericRangeTerm 
	 { $current=$iv_ruleNumericRangeTerm.current; } 
	 EOF 
;

// Rule NumericRangeTerm
ruleNumericRangeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMinimumNumAltParserRuleCall_0_0()); 
	    }
		lv_minimum_0_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"minimum",
        		lv_minimum_0_0, 
        		"org.osate.xtext.aadl2.properties.Properties.NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericRangeTermAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMaximumNumAltParserRuleCall_2_0()); 
	    }
		lv_maximum_2_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"maximum",
        		lv_maximum_2_0, 
        		"org.osate.xtext.aadl2.properties.Properties.NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Delta
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericRangeTermAccess().getDeltaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getDeltaNumAltParserRuleCall_3_1_0()); 
	    }
		lv_delta_4_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_4_0, 
        		"org.osate.xtext.aadl2.properties.Properties.NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumAlt
entryRuleNumAlt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumAltRule()); }
	 iv_ruleNumAlt=ruleNumAlt 
	 { $current=$iv_ruleNumAlt.current; } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); 
    }
    this_RealTerm_0=ruleRealTerm
    {
        $current = $this_RealTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); 
    }
    this_IntegerTerm_1=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); 
    }
    this_SignedConstant_2=ruleSignedConstant
    {
        $current = $this_SignedConstant_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); 
    }
    this_ConstantValue_3=ruleConstantValue
    {
        $current = $this_ConstantValue_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAppliesToKeywords
entryRuleAppliesToKeywords returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAppliesToKeywordsRule()); } 
	 iv_ruleAppliesToKeywords=ruleAppliesToKeywords 
	 { $current=$iv_ruleAppliesToKeywords.current.getText(); }  
	 EOF 
;

// Rule AppliesToKeywords
ruleAppliesToKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Applies 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAppliesToKeywordsAccess().getAppliesKeyword_0()); 
    }

	kw=To 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAppliesToKeywordsAccess().getToKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleInBindingKeywords
entryRuleInBindingKeywords returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getInBindingKeywordsRule()); } 
	 iv_ruleInBindingKeywords=ruleInBindingKeywords 
	 { $current=$iv_ruleInBindingKeywords.current.getText(); }  
	 EOF 
;

// Rule InBindingKeywords
ruleInBindingKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=In 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInBindingKeywordsAccess().getInKeyword_0()); 
    }

	kw=Binding 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInBindingKeywordsAccess().getBindingKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleInModesKeywords
entryRuleInModesKeywords returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getInModesKeywordsRule()); } 
	 iv_ruleInModesKeywords=ruleInModesKeywords 
	 { $current=$iv_ruleInModesKeywords.current.getText(); }  
	 EOF 
;

// Rule InModesKeywords
ruleInModesKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=In 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInModesKeywordsAccess().getInKeyword_0()); 
    }

	kw=Modes 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInModesKeywordsAccess().getModesKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleINTVALUE
entryRuleINTVALUE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getINTVALUERule()); } 
	 iv_ruleINTVALUE=ruleINTVALUE 
	 { $current=$iv_ruleINTVALUE.current.getText(); }  
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;





